<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Transitioning from Docker to Podman</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/LwE4art1MEg/" /><category term="Containers" /><category term="Kubernetes" /><category term="Linux" /><category term="Docker" /><category term="openshift" /><category term="Podman" /><category term="podman tutorial" /><category term="rhel 8" /><author><name>Cedric Clyburn</name></author><id>https://developers.redhat.com/blog/?p=753187</id><updated>2020-11-19T08:00:48Z</updated><published>2020-11-19T08:00:48Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://podman.io/"&gt;Podman&lt;/a&gt; is an excellent alternative to Docker containers when you need increased security, unique identifier (UID) separation using namespaces, and integration with &lt;code&gt;systemd&lt;/code&gt;. In this article, I use real-world examples to show you how to install Podman, use its basic commands, and transition from the Docker command-line interface (CLI) to Podman. You&amp;#8217;ll also see how to run an existing image with Podman and how to set up port forwarding.&lt;/p&gt; &lt;h2&gt;About Podman&lt;/h2&gt; &lt;p&gt;Podman is a daemonless, &lt;a href="https://developers.redhat.com/topics/open-source"&gt;open source&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/linux"&gt;Linux&lt;/a&gt;-native tool designed to develop, manage, and run &lt;a target="_blank" rel="nofollow" href="https://opencontainers.org/"&gt;Open Container Initiative&lt;/a&gt; (OCI) containers and pods. It has a similar directory structure to &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/building_running_and_managing_containers/building-container-images-with-buildah_building-running-and-managing-containers"&gt;Buildah&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/sysadmin/how-run-skopeo-container"&gt;Skopeo&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/crio/crio_runtime.html"&gt;CRI-O&lt;/a&gt;. Podman doesn&amp;#8217;t require an active container engine for its commands to work.&lt;/p&gt; &lt;h2&gt;Install Podman&lt;/h2&gt; &lt;p&gt;If you are running &lt;a href="https://developers.redhat.com/topics/linux"&gt;Red Hat Enterprise Linux 8&lt;/a&gt; (RHEL 8), enter the command:&lt;/p&gt; &lt;pre&gt;$ yum -y install podman&lt;/pre&gt; &lt;p&gt;If you are a Fedora user, replace &lt;code&gt;yum&lt;/code&gt; with &lt;code&gt;dnf&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;If Linux is not available, you can use &lt;a target="_blank" rel="nofollow" href="https://www.katacoda.com/courses/containers-without-docker/running-containers-with-podman"&gt;Podman online with Katacoda&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Transition to the Podman CLI&lt;/h2&gt; &lt;p&gt;One of Podman&amp;#8217;s greatest advantages is its complete CLI compatibility with Docker. In fact, when building Podman, Docker users can adapt without any significant changes. For example, you can use the &lt;code&gt;alias&lt;/code&gt; command to create a &lt;code&gt;docker&lt;/code&gt; alias for Podman:&lt;/p&gt; &lt;pre&gt;$ alias docker=podman&lt;/pre&gt; &lt;p&gt;You can run familiar commands such as &lt;code&gt;pull&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, and more with Podman.&lt;/p&gt; &lt;p&gt;You can also use Podman to run secure, rootless containers. By joining a user namespace and setting root access inside, you can enable Podman to mount certain filesystems and set up the container with no escalation of privileges.&lt;/p&gt; &lt;h2&gt;Run an existing image using Podman&lt;/h2&gt; &lt;p&gt;Fortunately, images created by Docker and Podman are compatible with the OCI standard. This means that Podman can push and pull from container registries such as the &lt;a target="_blank" rel="nofollow" href="https://hub.docker.com/"&gt;Docker Hub&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://quay.io/"&gt;Quay.io&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For example, let&amp;#8217;s test the &lt;a target="_blank" rel="nofollow" href="https://github.com/wernight/docker-funbox"&gt;Funbox&lt;/a&gt; container, which combines terminal commands and ASCII art. To start, clone the repository in a local directory with the following &lt;code&gt;git&lt;/code&gt; commands:&lt;/p&gt; &lt;pre&gt;$ git clone https://github.com/wernight/docker-funbox.git&lt;/pre&gt; &lt;p&gt;Once you download the necessary files, you can pull the base image and additional requirements to build and run a container:&lt;/p&gt; &lt;pre&gt;$ docker run --rm -it wernight/funbox&lt;/pre&gt; &lt;p&gt;In this case, we&amp;#8217;ve used the following tags with the &lt;code&gt;docker run&lt;/code&gt; command:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The &lt;code&gt;--rm&lt;/code&gt; tag removes the container after it exits.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;-it&lt;/code&gt; tag connects the container to the terminal so that you can interact with it.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;We now have a container active and running (mine is running on top of Debian Jessie). Let&amp;#8217;s add an argument to view the Funbox in action:&lt;/p&gt; &lt;pre&gt;$ docker run --rm -it wernight/funbox nyancat &lt;/pre&gt; &lt;div id="attachment_822797" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-822797" class="wp-image-822797 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-11-16-at-9.22.24-PM-1024x646.png" alt="A Nyan Cat displayed on the console screen." width="640" height="404" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-11-16-at-9.22.24-PM-1024x646.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-11-16-at-9.22.24-PM-300x189.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-11-16-at-9.22.24-PM-768x485.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-822797" class="wp-caption-text"&gt;Figure 1: Do you see a Nyan Cat?&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If you see a Nyan Cat displayed on your console screen, you are all set to deploy and interact with a container using Podman.&lt;/p&gt; &lt;h2&gt;Port forwarding with Podman&lt;/h2&gt; &lt;p&gt;Dozens of containers are available to download and use with Podman. For this example, let&amp;#8217;s set up a simple &lt;a target="_blank" rel="nofollow" href="https://httpd.apache.org/docs/2.4/"&gt;Apache HTTP Server 2.4&lt;/a&gt; in a &lt;a target="_blank" rel="nofollow" href="https://www.centos.org/centos-stream/"&gt;CentOS container&lt;/a&gt;. To begin, pull the base image you want to use from the Docker hub:&lt;/p&gt; &lt;pre&gt;$ podman pull centos:latest&lt;/pre&gt; &lt;p&gt;Once you&amp;#8217;ve created the base image, use &lt;code&gt;podman images&lt;/code&gt; to check whether the container is ready to use. You should see output similar to what&amp;#8217;s shown in Figure 2:&lt;/p&gt; &lt;div id="attachment_822827" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-822827" class="wp-image-822827 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-11-16-at-9.26.09-PM-1024x150.png" alt="Console output shows that the container is ready to use." width="640" height="94" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-11-16-at-9.26.09-PM-1024x150.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-11-16-at-9.26.09-PM-300x44.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-11-16-at-9.26.09-PM-768x113.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-822827" class="wp-caption-text"&gt;Figure 2: The container is ready to use.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;To run the new container with your base image, use the &lt;code&gt;podman run&lt;/code&gt; command with specific tags (such as &lt;code&gt;-it&lt;/code&gt;) to attach it to the CLI. Use &lt;code&gt;--name&lt;/code&gt; to define a custom name. Finally, define the base image where the container should run:&lt;/p&gt; &lt;pre&gt;$ podman run -it --name redhat-website centos:latest&lt;/pre&gt; &lt;p&gt;When the container is running, automatically set root access inside to run all commands.&lt;/p&gt; &lt;h3&gt;Create the Apache HTTP server&lt;/h3&gt; &lt;p&gt;To create an Apache web server, we can install the &lt;a target="_blank" rel="nofollow" href="https://httpd.apache.org/docs/2.4/programs/httpd.html"&gt;httpd&lt;/a&gt; program with the default package installer. For CentOS, it&amp;#8217;s &lt;code&gt;yum&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ yum install -y httpd&lt;/pre&gt; &lt;p&gt;Figure 3 shows the console output for this command.&lt;/p&gt; &lt;div id="attachment_822837" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-822837" class="wp-image-822837 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-11-16-at-9.27.27-PM-1024x88.png" alt="Console output for the yum install." width="640" height="55" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-11-16-at-9.27.27-PM-1024x88.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-11-16-at-9.27.27-PM-300x26.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-11-16-at-9.27.27-PM-768x66.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-822837" class="wp-caption-text"&gt;Figure 3: Console output for the yum install command.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You can now serve content from your container to your server&amp;#8217;s public IP address.&lt;/p&gt; &lt;h3&gt;Create a web page&lt;/h3&gt; &lt;p&gt;Next, we will add text to an &lt;code&gt;index.html&lt;/code&gt; file in the container&amp;#8217;s &lt;code&gt;var/www/html&lt;/code&gt; directory. Feel free to customize your message, or add the default below:&lt;/p&gt; &lt;pre&gt;$ echo "Hello from Red Hat!" &amp;#62; /var/www/html/index.html&lt;/pre&gt; &lt;p&gt;When you are finished, type &lt;code&gt;exit&lt;/code&gt; to shut down or power off the container.&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;podman commit&lt;/code&gt; to commit your changes. Use tags to define a name and a custom version for your customized container:&lt;/p&gt; &lt;pre&gt;$ podman commit redhat-website redhat-website:v1&lt;/pre&gt; &lt;p&gt;Finally, launch the container, then forward all requests made to your server&amp;#8217;s public IP address on port 8080 to port 80 on the container. Use the Podman tag &lt;code&gt;-p&lt;/code&gt; to port forward, and specify the container that you want to run. Ensure that &lt;code&gt;httpd&lt;/code&gt; is running as a foreground process:&lt;/p&gt; &lt;pre&gt;$ podman run -p 8080:80 redhat-website:v1 /usr/sbin/httpd -D FOREGROUND&lt;/pre&gt; &lt;p&gt;To view the web page from the host device, run a &lt;code&gt;curl&lt;/code&gt; command while specifying port 8080. You should see the screen shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_822847" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-822847" class="wp-image-822847 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-11-16-at-9.44.47-PM-1024x143.png" alt="A command line interface displaying the greeting, &amp;#34;Hello from Red Hat!&amp;#34;" width="640" height="89" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-11-16-at-9.44.47-PM-1024x143.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-11-16-at-9.44.47-PM-300x42.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-11-16-at-9.44.47-PM-768x108.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-822847" class="wp-caption-text"&gt;Figure 4: A successful example of port forwarding using Podman.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;How to stop and remove a container&lt;/h2&gt; &lt;p&gt;You can use the &lt;code&gt;podman stop&lt;/code&gt; command to stop a specified container:&lt;/p&gt; &lt;pre&gt;$ podman stop redhat-website&lt;/pre&gt; &lt;p&gt;Use &lt;code&gt;podman rm&lt;/code&gt; to remove the container:&lt;/p&gt; &lt;pre&gt;$ podman rm redhat-website&lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Every command that I demonstrated in this article is compatible with the Docker CLI. Podman has great integration features through &lt;code&gt;systemd&lt;/code&gt;. You can use it to run rootless containers, and it is a powerful container image for running OCI containers on RHEL 8.&lt;/p&gt; &lt;p&gt;You can continue to experiment with Podman by setting up &lt;a target="_blank" rel="nofollow" href="https://www.katacoda.com/courses/containers-without-docker/running-containers-with-podman"&gt;this Katacoda scenario&lt;/a&gt;, which offers an interactive environment directly in your browser.&lt;/p&gt; &lt;p&gt;If you need container orchestration, you can use Podman with &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; or &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. To get started with these platforms, see &lt;a target="_blank" rel="nofollow" href="https://kubernetesbyexample.com/"&gt;kubernetesbyexample.com&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://learn.openshift.com/"&gt;learn.openshift.com.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;For more interactive demonstrations, watch the video that accompanies this article.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/Za36qHbrf3g?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Resources&lt;/h2&gt; &lt;p&gt;If you want to keep learning about Podman, start with these articles on Red Hat Developer:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2020/09/25/rootless-containers-with-podman-the-basics/"&gt;Rootless containers with Podman: The basics&lt;/a&gt; (Prakhar Sethi, 2020)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/02/21/podman-and-buildah-for-docker-users/"&gt;Podman and Buildah for Docker users&lt;/a&gt; (William Henry, 2019)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/04/25/podman-basics-cheat-sheet/"&gt;Podman basics cheat sheet&lt;/a&gt; (Doug Tidwell, 2019)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/08/29/intro-to-podman/"&gt;Intro to Podman (Red Hat Enterprise Linux 7.6 Beta)&lt;/a&gt; (Alessandro Arrichiello, 2018)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F19%2Ftransitioning-from-docker-to-podman%2F&amp;#38;linkname=Transitioning%20from%20Docker%20to%20Podman" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F19%2Ftransitioning-from-docker-to-podman%2F&amp;#38;linkname=Transitioning%20from%20Docker%20to%20Podman" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F19%2Ftransitioning-from-docker-to-podman%2F&amp;#38;linkname=Transitioning%20from%20Docker%20to%20Podman" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F19%2Ftransitioning-from-docker-to-podman%2F&amp;#38;linkname=Transitioning%20from%20Docker%20to%20Podman" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F19%2Ftransitioning-from-docker-to-podman%2F&amp;#38;linkname=Transitioning%20from%20Docker%20to%20Podman" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F19%2Ftransitioning-from-docker-to-podman%2F&amp;#38;linkname=Transitioning%20from%20Docker%20to%20Podman" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F19%2Ftransitioning-from-docker-to-podman%2F&amp;#38;linkname=Transitioning%20from%20Docker%20to%20Podman" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F19%2Ftransitioning-from-docker-to-podman%2F&amp;#038;title=Transitioning%20from%20Docker%20to%20Podman" data-a2a-url="https://developers.redhat.com/blog/2020/11/19/transitioning-from-docker-to-podman/" data-a2a-title="Transitioning from Docker to Podman"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/19/transitioning-from-docker-to-podman/"&gt;Transitioning from Docker to Podman&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/LwE4art1MEg" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Podman is an excellent alternative to Docker containers when you need increased security, unique identifier (UID) separation using namespaces, and integration with systemd. In this article, I use real-world examples to show you how to install Podman, use its basic commands, and transition from the Docker command-line interface (CLI) to Podman. You&amp;#8217;ll also see how [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/19/transitioning-from-docker-to-podman/"&gt;Transitioning from Docker to Podman&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/11/19/transitioning-from-docker-to-podman/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">753187</post-id><dc:creator>Cedric Clyburn</dc:creator><dc:date>2020-11-19T08:00:48Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/11/19/transitioning-from-docker-to-podman/</feedburner:origLink></entry><entry><title>Using Multus and DataVolume in KubeVirt</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/2w0HRDR-mjQ/" /><category term="Containers" /><category term="Kubernetes" /><category term="Performance" /><category term="Security" /><category term="KubeVirt" /><category term="Multus-CNI" /><category term="openshift" /><category term="virtual machine management" /><category term="vm management" /><author><name>Huamin Chen</name></author><id>https://developers.redhat.com/blog/?p=820917</id><updated>2020-11-18T08:00:03Z</updated><published>2020-11-18T08:00:03Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://kubevirt.io/"&gt;KubeVirt&lt;/a&gt; is a cloud-native virtual machine management framework based on &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;. KubeVirt orchestrates workloads running on virtual machines in the same way that Kubernetes does for &lt;a href="https://developers.redhat.com/topics/containers"&gt;containers&lt;/a&gt;. KubeVirt has many features for managing the network, storage, images, and the virtual machine itself. This article focuses on two mechanisms for configuring network and storage requirements: &lt;a target="_blank" rel="nofollow" href="https://github.com/intel/multus-cni"&gt;Multus-CNI&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://kubevirt.io/2018/CDI-DataVolumes.html"&gt;CDI DataVolumes&lt;/a&gt;. You will learn how to configure these KubeVirt features for use cases that require high performance, security, and scalability.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: This article assumes that you are familiar with Kubernetes, containerization, and cloud-native architectures.&lt;/p&gt; &lt;h2&gt;Introduction to KubeVirt&lt;/h2&gt; &lt;p&gt;KubeVirt is a cloud-native virtual machine management framework that has been a &lt;a target="_blank" rel="nofollow" href="https://github.com/cncf/toc/blob/master/process/sandbox.md"&gt;Cloud Native Computing Foundation (CNCF) sandbox project&lt;/a&gt; since 2019. It uses Kubernetes custom resource definitions (CRDs) and controllers to manage the virtual machine lifecycle.&lt;/p&gt; &lt;p&gt;As shown in Figure 1, KubeVirt’s &lt;a target="_blank" rel="nofollow" href="https://kubevirt.io/user-guide/#/architecture"&gt;VirtualMachine API&lt;/a&gt; describes a virtual machine with a virtual network interface, disk, central processing unit (CPU), graphics processing unit (GPU), and memory. The VirtualMachine API includes four API objects: &lt;code&gt;interfaces&lt;/code&gt;, &lt;code&gt;disks&lt;/code&gt;, &lt;code&gt;volumes&lt;/code&gt;, and &lt;code&gt;resources&lt;/code&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The &lt;strong&gt;Interfaces API&lt;/strong&gt; describes the network devices, connectivity mechanisms, and networks that an interface may connect to.&lt;/li&gt; &lt;li&gt;The &lt;strong&gt;&lt;a target="_blank" rel="nofollow" href="https://kubevirt.io/user-guide/#/creation/disks-and-volumes?id=disks-and-volumes&amp;#34;"&gt;Disk and Volume APIs&lt;/a&gt;&lt;/strong&gt; describe, respectively, the types of disk (data or &lt;code&gt;cloudInit&lt;/code&gt;); the persistent volume claims (PVCs) from which the disks are created; and the initial disk images.&lt;/li&gt; &lt;li&gt;The &lt;strong&gt;Resources&lt;/strong&gt; API is the built-in Kubernetes API that describes the number of computing resource claims associated with a given virtual machine.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Figure 1 illustrates a virtual machine managed by KubeVirt.&lt;/p&gt; &lt;div id="attachment_820927" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image1-1.png"&gt;&lt;img aria-describedby="caption-attachment-820927" class="wp-image-820927 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image1-1-1024x890.png" alt="A diagram of the components in a KubeVirt managed virtual machine environment." width="640" height="556" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image1-1-1024x890.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image1-1-300x261.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image1-1-768x667.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image1-1.png 1425w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-820927" class="wp-caption-text"&gt;Figure 1: A KubeVirt managed virtual machine.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Here is the VirtualMachine API in a partial YAML file snippet:&lt;/p&gt; &lt;pre&gt;apiVersion: kubevirt.io/v1alpha3 kind: VirtualMachine metadata: name: my-vm spec: template: spec: domain: devices: interfaces: resources: disks: networks: volumes: dataVolumeTemplates: spec: pvc: &lt;/pre&gt; &lt;h2&gt;What is Multus-CNI?&lt;/h2&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/intel/multus-cni"&gt;Multus&lt;/a&gt; is a meta container network interface (CNI) that allows a pod to have multiple interfaces. It uses a chain of plug-ins in the &lt;a target="_blank" rel="nofollow" href="https://github.com/k8snetworkplumbingwg"&gt;NetworkAttachmentDefinition&lt;/a&gt; API for network attachment and management.&lt;/p&gt; &lt;p&gt;The following partial YAML file shows a sample &lt;code&gt;NetworkAttachmentDefinition&lt;/code&gt; instance. The &lt;code&gt;bridge&lt;/code&gt; plug-in establishes the network connection, and we&amp;#8217;ve used the &lt;a target="_blank" rel="nofollow" href="https://github.com/openshift/whereabouts-cn"&gt;whereabouts plug-in&lt;/a&gt; for IP address management (IPAM).&lt;/p&gt; &lt;pre&gt;apiVersion: k8s.cni.cncf.io/v1 kind: NetworkAttachmentDefinition metadata: name: my-bridge namespace: my-ns spec: config: '{ "cniVersion": "0.4.0", "name": "my-bridge", "plugins": [ { "name": "my-whereabouts", "type": "bridge", "bridge": "br1", "vlan": 1234, "ipam": { "type": "whereabouts", "range": "10.123.124.0/24", "routes": [] } } ] }' &lt;/pre&gt; &lt;p&gt;Note that there are multiple IPAM instances available: A &lt;code&gt;host-local&lt;/code&gt; instance manages IP addresses on the local host scope; &lt;code&gt;static&lt;/code&gt; specifies a single IP address; and &lt;code&gt;whereabouts&lt;/code&gt; allows us to manage IP addresses across all of the Kubernetes nodes centrally.&lt;/p&gt; &lt;h2&gt;Using Multus in KubeVirt&lt;/h2&gt; &lt;p&gt;KubeVirt supports Multus natively in its &lt;a target="_blank" rel="nofollow" href="https://kubevirt.io/user-guide/#/creation/interfaces-and-networks"&gt;Network API&lt;/a&gt;. We can use the Network API to obtain multiple network connections. If the goal is complete isolation, we can configure the API to use Multus as the default network. We will introduce both configurations.&lt;/p&gt; &lt;h3&gt;Creating a network extension&lt;/h3&gt; &lt;p&gt;Adding a network in KubeVirt consists of two steps. First, we create a &lt;code&gt;NetworkAttachmentDefinition&lt;/code&gt; for any connections that do not yet exist. When writing the &lt;code&gt;NetworkAttachmentDefinition&lt;/code&gt;, we must note how and at what scope we want to manage the IP addresses. Our options are &lt;code&gt;host-local&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, or &lt;code&gt;whereabouts&lt;/code&gt;. If the use case requires physical network isolation, we can use plug-ins, such as the &lt;code&gt;bridge&lt;/code&gt; plug-in, to support isolation at the level of the virtual local area network (VLAN) or virtual extensible local area network (VXLAN).&lt;/p&gt; &lt;p&gt;In the second step, we use the namespace/name format to reference the &lt;code&gt;NetworkAttachmentDefinition&lt;/code&gt; in the &lt;code&gt;VirtualMachine&lt;/code&gt;. When a &lt;code&gt;VirtualMachine&lt;/code&gt; instance is created, the &lt;a target="_blank" rel="nofollow" href="https://kubernetes.io/blog/2018/05/22/getting-to-know-kubevirt/"&gt;virt-launcher&lt;/a&gt; pod uses the reference to find the &lt;code&gt;NetworkAttachmentDefinition&lt;/code&gt; and apply the correct network configuration.&lt;/p&gt; &lt;p&gt;Figure 2 illustrates the configuration for a network extension. In the diagram, a virtual machine is configured with two network interfaces, &lt;code&gt;eth0&lt;/code&gt; and &lt;code&gt;eth1&lt;/code&gt;. The network interface names might vary depending on the operating system. The &lt;code&gt;eth0&lt;/code&gt; interface is connected to the Kubernetes pod network. The &lt;code&gt;eth1&lt;/code&gt; interface is connected to the “Other Network.” This network is described in the &lt;code&gt;NetworkAttachmentDefinition&lt;/code&gt; and referenced in the Multus &lt;code&gt;networkName&lt;/code&gt; for the &lt;code&gt;VirtualMachine&lt;/code&gt; instance.&lt;/p&gt; &lt;div id="attachment_821247" style="width: 478px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5faef77782437.png"&gt;&lt;img aria-describedby="caption-attachment-821247" class="wp-image-821247 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5faef77782437.png" alt="Diagram of a network extension with Multus." width="468" height="467" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5faef77782437.png 468w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5faef77782437-150x150.png 150w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5faef77782437-300x300.png 300w" sizes="(max-width: 468px) 100vw, 468px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-821247" class="wp-caption-text"&gt;Figure 2: A network extension with Multus.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The following partial YAML file shows the configuration for the network extension.&lt;/p&gt; &lt;pre&gt;apiVersion: k8s.cni.cncf.io/v1 kind: NetworkAttachmentDefinition metadata: name: my-bridge namespace: my-ns spec: config: '{ "cniVersion": "0.4.0", "name": "my-bridge", "plugins": [ { "name": "my-whereabouts", "type": "bridge", "bridge": "br1", "vlan": 1234, "ipam": { "type": "whereabouts", "range": "10.123.124.0/24", "routes": [ { "dst": "0.0.0.0/0", "gw" : "10.123.124.1" } ]}}]}' apiVersion: kubevirt.io/v1alpha3 kind: VirtualMachine metadata: name: my-vm spec: template: spec: domain: devices: interfaces: - name: default masquerade: {} - bridge: {} name: other-net networks: - name: default pod: {} - multus: networkName: my-ns/my-bridge name: other-net &lt;/pre&gt; &lt;p&gt;One reason for adding additional networks to a virtual machine is to ensure high-performance data transfers. The default Kubernetes pod networks are shared by all pods and services running on the Kubernetes nodes. As a result, the so-called &lt;i&gt;noisy neighbor issue&lt;/i&gt; could interfere with workloads sensitive to network traffic. Having a separate and dedicated network solves this problem.&lt;/p&gt; &lt;p&gt;As shown in Figure 3, you can use KubeVirt to configure a virtual machine to use a dedicated Ceph storage network orchestrated by &lt;a target="_blank" rel="nofollow" href="https://rook.io"&gt;Rook&lt;/a&gt;. Rook is a data services operator that orchestrates Ceph clusters. It just graduated from CNCF incubation. It also now supports allowing a Ceph cluster to attach to another network through a &lt;code&gt;NetworkAttachmentDefinition&lt;/code&gt;. In this configuration, Ceph’s public network and the virtual machine&amp;#8217;s Multus network reference the same &lt;code&gt;NetworkAttachmentDefinition&lt;/code&gt;.&lt;/p&gt; &lt;div id="attachment_820977" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image5-1.png"&gt;&lt;img aria-describedby="caption-attachment-820977" class="wp-image-820977 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image5-1-1024x865.png" alt="A diagram of a storage network attachment using Multus." width="640" height="541" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image5-1-1024x865.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image5-1-300x254.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image5-1-768x649.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image5-1.png 1575w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-820977" class="wp-caption-text"&gt;Figure 3. Example of a storage network attachment using Multus.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Create an isolated network&lt;/h3&gt; &lt;p&gt;When used for pods, the Multus CNI creates network interfaces in addition to the pod network&amp;#8217;s default interface. On a KubeVirt virtual machine, however, we can use the Multus network as the default network. The virtual machine does not need to attach to the pod network. As illustrated in Figure 4, the Multus API can be the sole network for the &lt;code&gt;VirtualMachine&lt;/code&gt;.&lt;/p&gt; &lt;div id="attachment_820957" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image3-1.png"&gt;&lt;img aria-describedby="caption-attachment-820957" class="wp-image-820957 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image3-1-1024x997.png" alt="Diagram of an isolated network configuration." width="640" height="623" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image3-1-1024x997.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image3-1-300x292.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image3-1-768x748.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image3-1.png 1463w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-820957" class="wp-caption-text"&gt;Figure 4: An isolated network configuration.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This configuration ensures that a virtual machine is fully isolated from other pods or virtual machines running on the same Kubernetes cluster. Isolation improves workload security. Moreover, the &lt;code&gt;bridge&lt;/code&gt; plug-in lets the network attachment use VLANs to achieve traffic isolation at physical networks. Note that a &lt;code&gt;NetworkAttachmentDefinition&lt;/code&gt; uses the &lt;code&gt;bridge&lt;/code&gt; plug-in and VLAN 1234. The Multus network is the sole network, and thus the default network in the virtual machine.&lt;/p&gt; &lt;p&gt;The following partial YAML file shows the configuration for creating an isolated network, as illustrated in Figure 4.&lt;/p&gt; &lt;pre&gt;apiVersion: k8s.cni.cncf.io/v1 kind: NetworkAttachmentDefinition metadata: name: my-bridge namespace: my-ns spec: config: '{ "cniVersion": "0.4.0", "name": "my-bridge", "plugins": [ { "name": "my-whereabouts", "type": "bridge", "bridge": "br1", "vlan": 1234, "ipam": { "type": "whereabouts", "range": "10.123.124.0/24", "routes": [ { "dst": "0.0.0.0/0", "gw" : "10.123.124.1" } ]}}]}' apiVersion: kubevirt.io/v1alpha3 kind: VirtualMachine metadata: name: my-vm spec: template: spec: domain: devices: interfaces: - bridge: {} name: default-net networks: - multus: networkName: my-ns/my-bridge name: default-net &lt;/pre&gt; &lt;h3&gt;Using separate VLANs in an isolated network&lt;/h3&gt; &lt;p&gt;Different virtual machines can use separate VLANs to ensure that they are attached to dedicated and isolated networks, as illustrated in Figure 5. Such configurations need to access native VLANs on the network infrastructure. Because native VLANs are not always accessible on public clouds, we suggest building a VXLAN tunnel first and creating the bridge on the VXLAN interface so that the VLANs can be created on the VXLAN tunnel.&lt;/p&gt; &lt;div id="attachment_820987" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image6-1.png"&gt;&lt;img aria-describedby="caption-attachment-820987" class="wp-image-820987 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image6-1-1024x810.png" alt="Separating virtual machines using Multus and VLAN." width="640" height="506" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image6-1-1024x810.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image6-1-300x237.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image6-1-768x608.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image6-1.png 1600w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-820987" class="wp-caption-text"&gt;Figure 5: Using Multus and VLAN for separate virtual machines.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Using DataVolume in KubeVirt&lt;/h2&gt; &lt;p&gt;KubeVirt&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="https://github.com/kubevirt/containerized-data-importer"&gt;containerized-data-importer&lt;/a&gt; (CDI) project provides a &lt;code&gt;DataVolume&lt;/code&gt; resource that encapsulates both a persistent volume claim (PVC) and a data source in a single object. Creating a &lt;code&gt;DataVolume&lt;/code&gt; creates a PVC and populates the persistent volume (PV) with data sources. The source can either be a URL or another existing PVC that the &lt;code&gt;DataVolume&lt;/code&gt; is cloned from. The following partial YAML file shows a &lt;code&gt;DataVolume&lt;/code&gt; that is cloned from the PVC &lt;code&gt;my-source-dv&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;apiVersion: cdi.kubevirt.io/v1alpha1 kind: DataVolume metadata: name: my-cloned-dv spec: source: pvc: name: my-source-dv namespace: my-ns pvc: accessModes: - ReadWriteOnce resources: requests: storage: 10Gi storageClassName: storage-provisioner &lt;/pre&gt; &lt;p&gt;KubeVirt lets us use a &lt;code&gt;DataVolume&lt;/code&gt; to boot up one or more virtual machines. When deploying virtual machines at scale, a pre-allocated &lt;code&gt;DataVolume&lt;/code&gt; is more scalable and reliable than an ad hoc &lt;code&gt;DataVolume&lt;/code&gt; that uses remote URL sources. We will look at both configurations.&lt;/p&gt; &lt;h3&gt;Two ways to use DataVolume&lt;/h3&gt; &lt;p&gt;As illustrated in Figure 6, an &lt;i&gt;ad hoc DataVolume&lt;/i&gt; refers to a configuration wherein a virtual machine fleet uses the same disk image from a remote URL. This configuration does not require any prior work and is very efficient in reusing the same DataVolume API object. However, because this configuration requires downloading each image to an individual &lt;code&gt;DataVolume&lt;/code&gt;, it is not reliable or scalable. If the remote image download is disrupted, the &lt;code&gt;DataVolume&lt;/code&gt; becomes unavailable, and so does the virtual machine.&lt;/p&gt; &lt;div id="attachment_820937" style="width: 617px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image2-1.png"&gt;&lt;img aria-describedby="caption-attachment-820937" class="wp-image-820937 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image2-1.png" alt="Digram of the process to create an ad hoc DataVolume configuration." width="607" height="522" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image2-1.png 607w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image2-1-300x258.png 300w" sizes="(max-width: 607px) 100vw, 607px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-820937" class="wp-caption-text"&gt;Figure 6: Creating an ad hoc DataVolume.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;A &lt;i&gt;pre-allocated DataVolume&lt;/i&gt; requires a two-step setup. First, we create a pre-allocated &lt;code&gt;DataVolume&lt;/code&gt; that uses a remote URL source. After we&amp;#8217;ve created the first &lt;code&gt;DataVolume&lt;/code&gt;, we clone a second &lt;code&gt;DataVolume&lt;/code&gt; that uses the same image as the pre-allocated one.&lt;/p&gt; &lt;p&gt;Figure 7 illustrates the two-step process for creating a pre-allocated &lt;code&gt;DataVolume&lt;/code&gt;. Although it is cumbersome, when used to boot up a large fleet of virtual machines, the two-step process is scalable and reliable.&lt;/p&gt; &lt;div id="attachment_820997" style="width: 687px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image7-1.png"&gt;&lt;img aria-describedby="caption-attachment-820997" class="wp-image-820997 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image7-1.png" alt="Digram of the process to create a pre-allocated DataVolume." width="677" height="515" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image7-1.png 677w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image7-1-300x228.png 300w" sizes="(max-width: 677px) 100vw, 677px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-820997" class="wp-caption-text"&gt;Figure 7: Creating a pre-allocated DataVolume.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Cloning a DataVolume&lt;/h3&gt; &lt;p&gt;There are two ways to clone a DataVolume in KubeVirt. Both have their advantages and limitations.&lt;/p&gt; &lt;h4&gt;Creating a host-assisted clone&lt;/h4&gt; &lt;p&gt;Figure 8 illustrates the process of creating a host-assisted clone. In this process, we can provision the source &lt;code&gt;DataVolume&lt;/code&gt; and target &lt;code&gt;DataVolume&lt;/code&gt; using the same &lt;code&gt;StorageClass&lt;/code&gt; or two different ones. The CDI pod mounts both volumes and copies the source&amp;#8217;s disk volume to the target. The data-copying process can work for any persistent volume type. Note, however, that copying data between two volumes is time-consuming. When doing it at scale, the resultant latency will delay the virtual machine bootup.&lt;/p&gt; &lt;div id="attachment_821017" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image9-1.png"&gt;&lt;img aria-describedby="caption-attachment-821017" class="wp-image-821017 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image9-1-908x1024.png" alt="Digram of the process to create a host-assisted clone." width="640" height="722" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image9-1-908x1024.png 908w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image9-1-266x300.png 266w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image9-1-768x866.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image9-1.png 1031w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-821017" class="wp-caption-text"&gt;Figure 8: Creating a host-assisted DataVolume clone.&lt;/p&gt;&lt;/div&gt; &lt;h4&gt;Creating a smart clone&lt;/h4&gt; &lt;p&gt;As illustrated in Figure 9, a smart clone only works for volumes that have a matching &lt;code&gt;StorageClass&lt;/code&gt;, meaning that they use the same storage provisioner. A smart clone does not copy data from the source to the target. Instead, it uses a &lt;a target="_blank" rel="nofollow" href="https://kubernetes.io/docs/concepts/storage/volume-snapshots/"&gt;VolumeSnapshot&lt;/a&gt; to create the target persistent volume. A &lt;code&gt;VolumeSnapshot&lt;/code&gt; can leverage the copy-on-write (CoW) snapshot feature on the storage back-end and is thus highly efficient and scalable. This approach is especially useful for reducing startup latency during a large-scale virtual machine deployment.&lt;/p&gt; &lt;div id="attachment_821007" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image8-1.png"&gt;&lt;img aria-describedby="caption-attachment-821007" class="wp-image-821007 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image8-1-908x1024.png" alt="Digram of the process to create a smart clone." width="640" height="722" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/image8-1-908x1024.png 908w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image8-1-266x300.png 266w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image8-1-768x866.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/image8-1.png 1031w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-821007" class="wp-caption-text"&gt;Figure 9: Creating a DataVolume smart clone.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;As a cloud-native virtual machine management framework, KubeVirt adopts cloud-native technologies alongside its own inventions. As a result, KubeVirt APIs and controllers support flexible and scalable virtual machine configurations and management that can integrate well with many technologies in the cloud-native ecosystem. This article focused on KubeVirt&amp;#8217;s network and storage mechanisms. We look forward to sharing more exciting features in the future, including KubeVirt&amp;#8217;s mechanisms for handling CPU, memory, and direct device access.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F18%2Fusing-multus-and-datavolume-in-kubevirt%2F&amp;#38;linkname=Using%20Multus%20and%20DataVolume%20in%20KubeVirt" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F18%2Fusing-multus-and-datavolume-in-kubevirt%2F&amp;#38;linkname=Using%20Multus%20and%20DataVolume%20in%20KubeVirt" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F18%2Fusing-multus-and-datavolume-in-kubevirt%2F&amp;#38;linkname=Using%20Multus%20and%20DataVolume%20in%20KubeVirt" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F18%2Fusing-multus-and-datavolume-in-kubevirt%2F&amp;#38;linkname=Using%20Multus%20and%20DataVolume%20in%20KubeVirt" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F18%2Fusing-multus-and-datavolume-in-kubevirt%2F&amp;#38;linkname=Using%20Multus%20and%20DataVolume%20in%20KubeVirt" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F18%2Fusing-multus-and-datavolume-in-kubevirt%2F&amp;#38;linkname=Using%20Multus%20and%20DataVolume%20in%20KubeVirt" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F18%2Fusing-multus-and-datavolume-in-kubevirt%2F&amp;#38;linkname=Using%20Multus%20and%20DataVolume%20in%20KubeVirt" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F18%2Fusing-multus-and-datavolume-in-kubevirt%2F&amp;#038;title=Using%20Multus%20and%20DataVolume%20in%20KubeVirt" data-a2a-url="https://developers.redhat.com/blog/2020/11/18/using-multus-and-datavolume-in-kubevirt/" data-a2a-title="Using Multus and DataVolume in KubeVirt"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/18/using-multus-and-datavolume-in-kubevirt/"&gt;Using Multus and DataVolume in KubeVirt&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/2w0HRDR-mjQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;KubeVirt is a cloud-native virtual machine management framework based on Kubernetes. KubeVirt orchestrates workloads running on virtual machines in the same way that Kubernetes does for containers. KubeVirt has many features for managing the network, storage, images, and the virtual machine itself. This article focuses on two mechanisms for configuring network and storage requirements: Multus-CNI [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/18/using-multus-and-datavolume-in-kubevirt/"&gt;Using Multus and DataVolume in KubeVirt&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/11/18/using-multus-and-datavolume-in-kubevirt/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">820917</post-id><dc:creator>Huamin Chen</dc:creator><dc:date>2020-11-18T08:00:03Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/11/18/using-multus-and-datavolume-in-kubevirt/</feedburner:origLink></entry><entry><title>Shift Remote 2020 - DevOps Heroes scheduled</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ICgAQJBFT0Y/shiftremote-2020-devops-heroes-scheduled.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="event" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-shift_remote_2020_devops_heroes_scheduled</id><updated>2020-11-18T06:00:04Z</updated><published>2020-11-18T06:00:00Z</published><content type="html">&lt;p&gt;&lt;span style="background-color: white; color: #444444;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;div style="text-align: left;"&gt;&lt;span style="background-color: white; color: #444444;"&gt;&lt;span style="font-family: georgia;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://remote.shiftconf.co/#tickets" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img border="0" data-original-height="691" data-original-width="1241" src="https://1.bp.blogspot.com/-FimNKHU256k/X7OdiT9jOvI/AAAAAAAAxpI/WabPW1QTB_AAW66d7vXIdC9BEyrtUB6swCNcBGAsYHQ/s320/Screenshot%2B2020-11-17%2Bat%2B10.51.21.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;Previously I &lt;a href="https://www.schabell.org/2020/07/shift-remote-2020-devops-heroes.html" target="_blank"&gt;shared&amp;nbsp;that I'd be joining&lt;/a&gt; the virtual online series called Shift Remote for 2020.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: georgia;"&gt;The planning was pretty fluid when I first posted but has settled down on dates and times for the event in our series. I'll be part of E11 (event 11) which is focused on DevOps, taking place on 15 Dec 2020 from 17:00 - 20:00 CET (GMT +2).&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="background-color: white; color: #444444; font-family: georgia;"&gt;Back&lt;/span&gt;&lt;span style="background-color: white; color: #444444; font-family: georgia;"&gt;&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.schabell.org/2018/08/shift-dev-2018-howto-jump-start-career-in-opensource-video.html" style="background-color: white; color: #4d469c; font-family: georgia; text-decoration-line: none;" target="_blank"&gt;in 2018 I traveled to Split, Croatia&amp;nbsp;&lt;/a&gt;&lt;span style="background-color: white; color: #444444; font-family: georgia;"&gt;for the then live on-site version of Shift and talked about how to jump start a career in open source. It was a pretty nice experience in the national opera house, the sessions were recorded, the local town was a vacation paradise, and the people were extremely nice.&lt;/span&gt;&lt;/p&gt;&lt;div style="background-color: white; color: #444444;"&gt;&lt;span style="font-family: georgia;"&gt;When the organization reached out about presenting for one of the Shift Remote sessions, I decided to share some insights into expanding a DevOps engineers toolbox with the following session.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #444444;"&gt;&lt;span style="font-family: georgia;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #444444;"&gt;&lt;span style="font-family: georgia;"&gt;What am I going to share with you at this event exactly?&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #444444;"&gt;&lt;span&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #444444;"&gt;&lt;span style="font-family: georgia;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #444444;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-9Yjxrid1J5o/X7Oa-bgvBII/AAAAAAAAxo8/vBvsMfse3V83bJT1oYitaxMsFKUy5kutgCNcBGAsYHQ/s1082/Screenshot%2B2020-11-17%2Bat%2B10.32.09.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style="font-family: georgia;"&gt;I'll be sharing an online introduction to the DevOps Heroes workshop, helping anyone in the operations world to get started with adding a new and powerful tool to their automation toolboxes.&lt;br /&gt;&lt;/span&gt;&lt;div&gt;&lt;span style="font-family: georgia;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="margin: 0px; position: relative;"&gt;&lt;span style="font-family: georgia; font-size: small;"&gt;DevOps Heroes - Adding advanced automation to your toolbox&lt;/span&gt;&lt;/h3&gt;&lt;div&gt;&lt;i&gt;&lt;span style="font-family: georgia;"&gt;DevOps is more than the process of automating your CI/CD pipelines to generate code and deployment artifacts for production. It's also about organizational change and integration of many subtle processes that help you to deliver applications seamlessly from development to production through your operations.&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span style="font-family: georgia;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span style="font-family: georgia;"&gt;&lt;span style="clear: right; float: right; font-family: georgia; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" data-original-height="579" data-original-width="1082" src="https://1.bp.blogspot.com/-9Yjxrid1J5o/X7Oa-bgvBII/AAAAAAAAxo8/vBvsMfse3V83bJT1oYitaxMsFKUy5kutgCNcBGAsYHQ/s320/Screenshot%2B2020-11-17%2Bat%2B10.32.09.png" width="320" /&gt;&lt;/span&gt;Let's unlock the power of process integration with a getting started walk through of a free online hands-on workshop that adds advanced automation to your devops toolbox. We'll take you through the integration of an organizational process as part of your DevOps strategy. Step-by-step you'll learn how to build a data model, create an automated process, integrate user approval tasks, and more using modern open source process automation tooling.&amp;nbsp;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span style="font-family: georgia;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span style="font-family: georgia;"&gt;No experience in automation integration is required. Join us for a short session that helps you in adding a new tool to your devops toolbox.&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span style="font-family: georgia;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span style="font-family: georgia;"&gt;Date: 15 Dec 2020&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span style="font-family: georgia;"&gt;Time: 19:30 - 19:55 CET (GMT +2)&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;a href="https://remote.shiftconf.co/#tickets" target="_blank"&gt;&lt;span style="font-family: georgia;"&gt;Register for free&lt;/span&gt;&lt;/a&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #444444;"&gt;&lt;i&gt;&lt;span style="font-family: georgia;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #444444;"&gt;&lt;span style="font-family: georgia;"&gt;The session will take place in their DevOps week, dates and times in the schedule can be found online here. It should be updated as the event gets closer as they are now targeting Dec 2020. The session should be recorded and on-demand after the event, while the targeted&amp;nbsp;&lt;a href="https://bpmworkshop.gitlab.io/rhpam-devops-workshop/#/" style="color: #4d469c; text-decoration-line: none;" target="_blank"&gt;workshop is online and available&lt;/a&gt;&amp;nbsp;to you today.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #444444;"&gt;&lt;span style="font-family: georgia;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #444444;"&gt;&lt;span style="font-family: georgia;"&gt;Get yourself &lt;a href="https://remote.shiftconf.co/#tickets" target="_blank"&gt;registered for free&lt;/a&gt; and join me at Shift Remote 2020 - E11.&lt;/span&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=KveGJ7QIrps:6u4AkYMZDo0:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=KveGJ7QIrps:6u4AkYMZDo0:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=KveGJ7QIrps:6u4AkYMZDo0:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=KveGJ7QIrps:6u4AkYMZDo0:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=KveGJ7QIrps:6u4AkYMZDo0:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=KveGJ7QIrps:6u4AkYMZDo0:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=KveGJ7QIrps:6u4AkYMZDo0:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=KveGJ7QIrps:6u4AkYMZDo0:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=KveGJ7QIrps:6u4AkYMZDo0:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=KveGJ7QIrps:6u4AkYMZDo0:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=KveGJ7QIrps:6u4AkYMZDo0:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/KveGJ7QIrps" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ICgAQJBFT0Y" height="1" width="1" alt=""/&gt;</content><summary>Previously I shared that I'd be joining the virtual online series called Shift Remote for 2020.  The planning was pretty fluid when I first posted but has settled down on dates and times for the event in our series. I'll be part of E11 (event 11) which is focused on DevOps, taking place on 15 Dec 2020 from 17:00 - 20:00 CET (GMT +2). Back in 2018 I traveled to Split, Croatia for the then live on-s...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-11-18T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/KveGJ7QIrps/shiftremote-2020-devops-heroes-scheduled.html</feedburner:origLink></entry><entry><title>Event-driven serverless applications with Camel K</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/QD9M8w7frps/" /><category term="DevNation" /><category term="Event-Driven" /><category term="Kubernetes" /><category term="Serverless" /><category term="Camel K" /><category term="integration patterns" /><category term="Knative" /><category term="open source integration" /><category term="openshift" /><author><name>Nicola Ferraro</name></author><id>https://developers.redhat.com/blog/?p=822707</id><updated>2020-11-17T08:00:16Z</updated><published>2020-11-17T08:00:16Z</published><content type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about event-driven serverless applications and Apache Camel K from &lt;a href="https://developers.redhat.com/blog/author/nferraro /"&gt;Nicola Ferraro&lt;/a&gt;, &lt;a href="https://developers.redhat.com/blog/author/lburgazz /"&gt;Luca Burgazzoli&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/blog/author/burrsutter/"&gt;Burr Sutter&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/topics/event-driven/"&gt;Event-driven&lt;/a&gt; serverless applications really rock these days. &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;Knative&lt;/a&gt; and &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; offer nice primitives for creating them, but if you&amp;#8217;ve ever tried going beyond the &amp;#8220;Hello World&amp;#8221; example, you know that writing real-life applications is much harder than expected.&lt;/p&gt; &lt;p&gt;The more your application is deconstructed into smaller pieces, the more you need better communication patterns for managing all of the inherent complexity. Here comes &lt;a href="https://developers.redhat.com/topics/camel-k"&gt;Camel K&lt;/a&gt;, a lightweight integration tool created specifically to address these issues. Camel K allows you to declaratively orchestrate events in a &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;serverless environment&lt;/a&gt; using a beautiful language. It allows you to connect functions and services to any kind of external data source or sink, from enterprise services to cloud services or SaaS.&lt;/p&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/camel-k/latest/index.html"&gt;Camel K is based on Apache Camel&lt;/a&gt;, the most powerful open source integration framework, and it leverages Knative to deliver integration patterns in a serverless way, allowing you to effectively create real-life serverless applications. We will show how Camel K works under the hood and, with coding examples, we’ll also demonstrate how Camel K makes it easy to connect (almost) anything using integration patterns and the 300+ components that Apache Camel provides.&lt;/p&gt; &lt;p&gt;Watch the entire talk:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/hlUzLC71nAM?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Learn more&lt;/h2&gt; &lt;p&gt;Join us at an &lt;a href="https://developers.redhat.com/events/"&gt;upcoming developer event&lt;/a&gt;, and see our collection of &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;past DevNation Tech Talks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F17%2Fevent-driven-serverless-applications-with-camel-k%2F&amp;#38;linkname=Event-driven%20serverless%20applications%20with%20Camel%20K" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F17%2Fevent-driven-serverless-applications-with-camel-k%2F&amp;#38;linkname=Event-driven%20serverless%20applications%20with%20Camel%20K" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F17%2Fevent-driven-serverless-applications-with-camel-k%2F&amp;#38;linkname=Event-driven%20serverless%20applications%20with%20Camel%20K" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F17%2Fevent-driven-serverless-applications-with-camel-k%2F&amp;#38;linkname=Event-driven%20serverless%20applications%20with%20Camel%20K" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F17%2Fevent-driven-serverless-applications-with-camel-k%2F&amp;#38;linkname=Event-driven%20serverless%20applications%20with%20Camel%20K" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F17%2Fevent-driven-serverless-applications-with-camel-k%2F&amp;#38;linkname=Event-driven%20serverless%20applications%20with%20Camel%20K" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F17%2Fevent-driven-serverless-applications-with-camel-k%2F&amp;#38;linkname=Event-driven%20serverless%20applications%20with%20Camel%20K" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F17%2Fevent-driven-serverless-applications-with-camel-k%2F&amp;#038;title=Event-driven%20serverless%20applications%20with%20Camel%20K" data-a2a-url="https://developers.redhat.com/blog/2020/11/17/event-driven-serverless-applications-with-camel-k/" data-a2a-title="Event-driven serverless applications with Camel K"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/17/event-driven-serverless-applications-with-camel-k/"&gt;Event-driven serverless applications with Camel K&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/QD9M8w7frps" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about event-driven serverless applications and Apache Camel K from Nicola Ferraro, Luca Burgazzoli, and Burr Sutter. Event-driven serverless applications really rock [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/17/event-driven-serverless-applications-with-camel-k/"&gt;Event-driven serverless applications with Camel K&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/11/17/event-driven-serverless-applications-with-camel-k/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">822707</post-id><dc:creator>Nicola Ferraro</dc:creator><dc:date>2020-11-17T08:00:16Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/11/17/event-driven-serverless-applications-with-camel-k/</feedburner:origLink></entry><entry><title>Devfiles and Kubernetes cluster support in OpenShift Connector 0.2.0 extension for VS Code</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/yV6nNttALg0/" /><category term="Containers" /><category term="Kubernetes" /><category term="VS Code" /><category term="codeready" /><category term="CodeReady Containers" /><category term="devfile" /><category term="odo 2" /><category term="openshift" /><author><name>Mohit Suman</name></author><id>https://developers.redhat.com/blog/?p=805727</id><updated>2020-11-16T08:00:43Z</updated><published>2020-11-16T08:00:43Z</published><content type="html">&lt;p&gt;We are pleased to announce that the new release of the &lt;a target="_blank" rel="nofollow" href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-openshift-connector"&gt;OpenShift Connector extension for Visual Studio Code&lt;/a&gt; (VS Code) is now available. The 0.2.0 release offers new features for rapidly developing and deploying code on &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; and &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; clusters. OpenShift Connector now supports component deployment using devfiles, leveraging &lt;a href="https://developers.redhat.com/blog/2020/10/06/kubernetes-integration-and-more-in-odo-2-0/"&gt;odo 2.0 command-line interface&lt;/a&gt; under the hood.&lt;/p&gt; &lt;p&gt;With this release, the extension now supports connecting to vanilla Kubernetes clusters and includes a new option for creating OpenShift 4 clusters locally via &lt;a href="https://developers.redhat.com/products/codeready-containers/overview"&gt;Red Hat CodeReady Containers&lt;/a&gt; (CRC). In this article, we introduce these new features and present the workflow for using CodeReady Containers with OpenShift Connector 0.2.0.&lt;/p&gt; &lt;h2&gt;Install OpenShift Connector 0.2.0&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-openshift-connector"&gt;Install the OpenShift Connector plug-in&lt;/a&gt; directly from the Visual Studio Code Marketplace.&lt;/li&gt; &lt;li&gt;Alternatively, select the &lt;strong&gt;Extensions&lt;/strong&gt; view in VS Code by clicking on its square icon in the left-side taskbar. Search for the &lt;strong&gt;OpenShift Connector&lt;/strong&gt; plug-in and click &lt;strong&gt;Install&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Once you have installed the extension, the OpenShift icon will be added to the left-side activity bar and ready for use.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;&lt;span id="more-805727"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Odo 2.0 in OpenShift Connector 0.2.0&lt;/h2&gt; &lt;p&gt;OpenShift Connector now supports &lt;a href="https://odo.dev/blog/odo-200-ga-release/"&gt;odo 2.0&lt;/a&gt; in addition to Source-to-Image (S2I) files. Using &lt;code&gt;odo&lt;/code&gt;, you can create devfile-based components and deploy them on your OpenShift and Kubernetes clusters.&lt;/p&gt; &lt;h3&gt;Using devfiles in VS Code&lt;/h3&gt; &lt;p&gt;A &lt;a target="_blank" rel="nofollow" href="https://odo.dev/file-reference/"&gt;devfile&lt;/a&gt; is a YAML file used to define the developer workspace in &lt;a href="https://developers.redhat.com/videos/youtube/S3auoOqwDS8"&gt;Eclipse Che&lt;/a&gt;. Now supported in odo 2.0, devfiles are easily configured and reproducible definitions for portable developer environments. Each devfile is a declarative abstraction of a developer workspace. It includes the runtime environment and project source code, mapped to the repositories, tools, plugins, and commands that you need to code, build, test, run, and debug your applications. Using devfiles makes your developer workspace replicable. You can use OpenShift application definitions within a devfile.&lt;/p&gt; &lt;h4&gt;List devfile components&lt;/h4&gt; &lt;p&gt;OpenShift Connector now lets you view a list of currently supported devfile components in your integrated VS Code terminal window. Right-click on your OpenShift or Kubernetes cluster and select &lt;b&gt;List Catalog Components&lt;/b&gt;. You will see the following output in the terminal (see Figure 1).&lt;/p&gt; &lt;div id="attachment_805777" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/odo-catalog-components.png"&gt;&lt;img aria-describedby="caption-attachment-805777" class="wp-image-805777 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/odo-catalog-components-1024x600.png" alt="The terminal displays a list of current devfile components." width="640" height="375" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/odo-catalog-components-1024x600.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/odo-catalog-components-300x176.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/odo-catalog-components-768x450.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-805777" class="wp-caption-text"&gt;Figure 1: Select &amp;#8216;List Catalog Components&amp;#8217; to see a list of currently supported devfile components.&lt;/p&gt;&lt;/div&gt; &lt;h4&gt;List Operator-based services&lt;/h4&gt; &lt;p&gt;You can also use OpenShift Connector (and odo 2.0 under the hood) to view a list of Operator-based services in your VS Code terminal window. Right-click on your OpenShift or Kubernetes cluster and select &lt;b&gt;List Catalog Services&lt;/b&gt;. You will see the following list in the terminal (see Figure 2).&lt;/p&gt; &lt;div id="attachment_805797" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/odo-services.png"&gt;&lt;img aria-describedby="caption-attachment-805797" class="wp-image-805797 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/odo-services-1024x312.png" alt="The terminal displays a list of Operator-based services in the cluster." width="640" height="195" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/odo-services-1024x312.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/odo-services-300x91.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/odo-services-768x234.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-805797" class="wp-caption-text"&gt;Figure 2: Select &amp;#8216;List Catalog Services&amp;#8217; to see a list of Operators in the cluster.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: OpenShift Connector&amp;#8217;s support for odo 2.0 aligns with the move to using devfiles as the common definition format across Red Hat&amp;#8217;s developer tooling portfolio.&lt;/p&gt; &lt;h3&gt;Working demo of a devfile integration&lt;/h3&gt; &lt;p&gt;This demonstration video guides you through the workflow to use a Node.js devfile deployment configuration on a remote OpenShift cluster.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/HEsYgDqD1rM?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Run OpenShift clusters locally&lt;/h2&gt; &lt;p&gt;OpenShift Connector now lets you create OpenShift 4 clusters directly from the extension in VS Code. We have added this feature to improve the &lt;a href="https://developers.redhat.com/devnation/tech-talks/odo-iterative-container-based-development"&gt;inner loop development experience&lt;/a&gt; for developers on OpenShift. Several infrastructure options are available, including using CodeReady Containers to &lt;a target="_blank" rel="nofollow" href="http://developers.redhat.com/products/codeready-containers"&gt;run an OpenShift 4 cluster locally&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To access this feature, select the new &lt;b&gt;Add OpenShift Cluster&lt;/b&gt; (+ icon) command in VS Code&amp;#8217;s Application Explorer view, as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_808287" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/add-openshift-cluster.png"&gt;&lt;img aria-describedby="caption-attachment-808287" class="wp-image-808287 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/add-openshift-cluster-1024x210.png" alt="The 'Add OpenShift Cluster' option is a link in the upper-right corner of the screen." width="640" height="131" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/add-openshift-cluster-1024x210.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/add-openshift-cluster-300x61.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/add-openshift-cluster-768x157.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-808287" class="wp-caption-text"&gt;Figure 3: Select the &amp;#8216;Add OpenShift Cluster&amp;#8217; option in VS Code&amp;#8217;s Application Explorer view.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You will then see the two options displayed in Figure 4.&lt;/p&gt; &lt;div id="attachment_805817" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-2020-10-20-at-2.51.59-AM.png"&gt;&lt;img aria-describedby="caption-attachment-805817" class="wp-image-805817 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-2020-10-20-at-2.51.59-AM-1024x725.png" alt="Options to deploy a cluster locally or in a public cloud." width="640" height="453" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-2020-10-20-at-2.51.59-AM-1024x725.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-2020-10-20-at-2.51.59-AM-300x212.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-2020-10-20-at-2.51.59-AM-768x544.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-2020-10-20-at-2.51.59-AM.png 1556w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-805817" class="wp-caption-text"&gt;Figure 4: Deploy your cluster locally or in a public cloud.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Create a cluster locally&lt;/h3&gt; &lt;p&gt;OpenShift Connector leverages &lt;a target="_blank" rel="nofollow" href="https://code-ready.github.io/crc/"&gt;CodeReady Containers&lt;/a&gt; to let you create a minimal, preconfigured OpenShift 4 cluster on your laptop or desktop for development and testing. The OpenShift Connector 0.2.0 extension supports CodeReady Containers 1.16.0, which currently runs OpenShift 4.5.9. (We are releasing support for OpenShift 4.6 soon.)&lt;/p&gt; &lt;p&gt;Selecting the &lt;b&gt;Create/Refresh Cluster&lt;/b&gt; option opens a wizard view where you can configure the cluster memory, CPU cores, nameserver, and more. Once you&amp;#8217;ve completed the configuration, you will be able to start, stop, and refresh the cluster as needed. You can then view the cluster&amp;#8217;s status as it runs in your local system. This feature is supported for all three platforms, including &lt;a target="_blank" rel="nofollow" href="https://code-ready.github.io/crc/#_microsoft_windows"&gt;Windows&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://code-ready.github.io/crc/#_linux"&gt;Linux&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://code-ready.github.io/crc/#_macos"&gt;macOS&lt;/a&gt;.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: The CodeReady Containers OpenShift cluster is ephemeral and is not intended for production use. See the CodeReady Containers &lt;a target="_blank" rel="nofollow" href="https://code-ready.github.io/crc/#differences-from-production-openshift-install_gsg"&gt;Getting Started Guide&lt;/a&gt; for more details.&lt;/p&gt; &lt;h3&gt;Deploy a cluster in a public cloud&lt;/h3&gt; &lt;p&gt;If you prefer to deploy your cluster in a public cloud, you may install OpenShift 4 in your account with a supported &lt;a target="_blank" rel="nofollow" href="https://cloud.redhat.com/openshift/install#public-cloud"&gt;public cloud provider&lt;/a&gt;. Public cloud options include Amazon Web Services (AWS), Microsoft Azure, and Google Cloud.&lt;/p&gt; &lt;h2&gt;How to run CodeReady Containers using OpenShift Connector 0.2.0&lt;/h2&gt; &lt;p&gt;You can quickly set up and run CodeReady Containers using OpenShift Connector 0.2.0.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;b&gt;Download the CodeReady Containers bundle&lt;/b&gt;: Download and extract the CodeReady Containers &lt;a target="_blank" rel="nofollow" href="http://mirror.openshift.com/pub/openshift-v4/clients/crc/1.16.0/"&gt;1.16.0&lt;/a&gt; bundle for your operating system and place the binary in your &lt;code&gt;$PATH&lt;/code&gt;. Be sure to provide the full executable location when you provide the path (for example, &lt;code&gt;~/Downloads/crc-macos-1.16.0-amd64/crc&lt;/code&gt;). Figure 5 shows the options to download the 1.16.0 bundle and set the binary location.&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_817827" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-09-at-2.14.33-AM.png"&gt;&lt;img aria-describedby="caption-attachment-817827" class="wp-image-817827 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-09-at-2.14.33-AM.png" alt="The dialog to download the CodeReady Containers binary and set the binary location." width="640" height="453" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-817827" class="wp-caption-text"&gt;Figure 5: Download the CodeReady Containers binary and add the binary location.&lt;/p&gt;&lt;/div&gt; &lt;ol start="2"&gt; &lt;li&gt;&lt;b&gt;Set the file path for the image pull secret&lt;/b&gt;: The next step is to provide the pull secret&amp;#8217;s file location, as shown in Figure 6. You can download and upload a pull secret file using &lt;a target="_blank" rel="nofollow" href="https://cloud.redhat.com/openshift/install/crc/installer-provisioned"&gt;your Red Hat developer account&lt;/a&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_817847" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-09-at-2.46.38-AM.png"&gt;&lt;img aria-describedby="caption-attachment-817847" class="wp-image-817847 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-09-at-2.46.38-AM.png" alt="The dialog to select a pull-secret file location." width="640" height="453" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-817847" class="wp-caption-text"&gt;Figure 6: Provide the pull secret&amp;#8217;s file location.&lt;/p&gt;&lt;/div&gt; &lt;ol start="3"&gt; &lt;li&gt;&lt;b&gt;Select the following optional CRC configurations&lt;/b&gt;: &lt;ul&gt; &lt;li&gt;CPU cores: Number of CPU cores to allocate to the OpenShift cluster (the default is four).&lt;/li&gt; &lt;li&gt;Memory: MiB value of memory to allocate to the OpenShift cluster (the default is 9,216).&lt;/li&gt; &lt;li&gt;Nameserver: IPv4 address of the nameserver to use for the OpenShift cluster.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Figure 7 shows the optional configurations.&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_817857" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-09-at-3.00.04-AM.png"&gt;&lt;img aria-describedby="caption-attachment-817857" class="wp-image-817857 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-09-at-3.00.04-AM.png" alt="The dialog to select optional configurations for CodeReady Containers." width="640" height="453" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-817857" class="wp-caption-text"&gt;Figure 7: Enter the optional configurations for CodeReady Containers.&lt;/p&gt;&lt;/div&gt; &lt;ol start="4"&gt; &lt;li&gt;&lt;b&gt;Set up CodeReady Containers&lt;/b&gt;: Click &lt;b&gt;Setup CRC&lt;/b&gt;, and the command will be executed in the VS Code integrated terminal, as shown in Figure 8. This action sets up your host machine&amp;#8217;s environment for the CodeReady Containers virtual machine. The &lt;code&gt;~/.crc&lt;/code&gt; directory will be created if it does not already exist.&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_817867" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-09-at-3.05.56-AM.png"&gt;&lt;img aria-describedby="caption-attachment-817867" class="wp-image-817867 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-09-at-3.05.56-AM.png" alt="The dialog to set up CodeReady Containers." width="640" height="453" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-817867" class="wp-caption-text"&gt;Figure 8: Set up your host operating system for the CodeReady Containers virtual machine.&lt;/p&gt;&lt;/div&gt; &lt;ol start="5"&gt; &lt;li&gt;&lt;b&gt;Start the cluster&lt;/b&gt;: This command, shown in Figure 9, starts the CodeReady Containers virtual machine and creates a minimal OpenShift 4.5.9 cluster on your laptop or desktop computer.&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_817887" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-09-at-3.10.30-AM.png"&gt;&lt;img aria-describedby="caption-attachment-817887" class="wp-image-817887 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-09-at-3.10.30-AM.png" alt="The dialog to start CodeReady Containers." width="640" height="453" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-817887" class="wp-caption-text"&gt;Figure 9: Start CodeReady Containers.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once the cluster is running, the OpenShift cluster status will be displayed, as shown in Figure 10.&lt;/p&gt; &lt;div id="attachment_806237" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-2020-10-21-at-3.23.38-AM.png"&gt;&lt;img aria-describedby="caption-attachment-806237" class="wp-image-806237 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-2020-10-21-at-3.23.38-AM-1024x684.png" alt="The terminal shows that the OpenShift cluster is running." width="640" height="428" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-2020-10-21-at-3.23.38-AM-1024x684.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-2020-10-21-at-3.23.38-AM-300x201.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-2020-10-21-at-3.23.38-AM-768x513.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-806237" class="wp-caption-text"&gt;Figure 10: Confirm that the OpenShift cluster is running in CodeReady Containers.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Viewing and managing Kubernetes clusters&lt;/h2&gt; &lt;p&gt;The OpenShift Connector extension depends on Microsoft&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="https://marketplace.visualstudio.com/items?itemName=ms-kubernetes-tools.vscode-kubernetes-tools"&gt;Kubernetes extension&lt;/a&gt;, which is installed automatically with OpenShift Connector. This extension lets you view all Kubernetes clusters and simplifies the management of Kubernetes resources. Figure 11 shows the Kubernetes extensions as one of OpenShift Connector&amp;#8217;s dependencies.&lt;/p&gt; &lt;div id="attachment_818077" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-09-at-6.16.03-AM.png"&gt;&lt;img aria-describedby="caption-attachment-818077" class="wp-image-818077 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/Screenshot-2020-11-09-at-6.16.03-AM.png" alt="The screen shows the Kubernetes extension and YAML as dependencies." width="640" height="428" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-818077" class="wp-caption-text"&gt;Figure 11: Dependencies for OpenShift Connector.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Using the Kubernetes extension&amp;#8217;s public API, the Kubernetes Clusters view shows OpenShift-specific resources like projects, routes, deployment configurations, image streams, templates, and more. These resources are visible only for OpenShift clusters. The OpenShift Connector extension also provides a &lt;b&gt;Use Project&lt;/b&gt; command for switching between multiple OpenShift Projects in the Kubernetes Clusters view.&lt;/p&gt; &lt;h2&gt;Support for OpenShift Connector 0.2.0&lt;/h2&gt; &lt;p&gt;Please reach out if you need support fixing bugs or using new features in OpenShift Connector 0.2.0. We would also be glad to hear from you if you want to propose a new feature for this VS Code extension. You can connect with the OpenShift Connector 0.2.0 development team by:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Selecting &lt;b&gt;OpenShift: Report Extension Issue&lt;/b&gt; from your VS Code command palette or the extension title view.&lt;/li&gt; &lt;li&gt;Submitting an issue directly on the &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer/vscode-openshift-tools/issues"&gt;VS Code OpenShift Tools GitHub repository&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Discussing your issue with the development team and community on &lt;a target="_blank" rel="nofollow" href="https://gitter.im/redhat-developer/openshift-connector"&gt;Gitter&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Try OpenShift Connector 0.2.0&lt;/h2&gt; &lt;p&gt;The OpenShift Connector 0.2.0 extension is available for installation from the &lt;a target="_blank" rel="nofollow" href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-openshift-connector"&gt;VS Code Marketplace&lt;/a&gt; and the &lt;a target="_blank" rel="nofollow" href="https://open-vsx.org/extension/redhat/vscode-openshift-connector"&gt;open-vsix.org&lt;/a&gt; registry. We are already working on new features for future releases. Stay tuned for updates!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F16%2Fdevfiles-and-kubernetes-cluster-support-in-openshift-connector-0-2-0-extension-for-vs-code%2F&amp;#38;linkname=Devfiles%20and%20Kubernetes%20cluster%20support%20in%20OpenShift%20Connector%200.2.0%20extension%20for%20VS%20Code" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F16%2Fdevfiles-and-kubernetes-cluster-support-in-openshift-connector-0-2-0-extension-for-vs-code%2F&amp;#38;linkname=Devfiles%20and%20Kubernetes%20cluster%20support%20in%20OpenShift%20Connector%200.2.0%20extension%20for%20VS%20Code" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F16%2Fdevfiles-and-kubernetes-cluster-support-in-openshift-connector-0-2-0-extension-for-vs-code%2F&amp;#38;linkname=Devfiles%20and%20Kubernetes%20cluster%20support%20in%20OpenShift%20Connector%200.2.0%20extension%20for%20VS%20Code" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F16%2Fdevfiles-and-kubernetes-cluster-support-in-openshift-connector-0-2-0-extension-for-vs-code%2F&amp;#38;linkname=Devfiles%20and%20Kubernetes%20cluster%20support%20in%20OpenShift%20Connector%200.2.0%20extension%20for%20VS%20Code" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F16%2Fdevfiles-and-kubernetes-cluster-support-in-openshift-connector-0-2-0-extension-for-vs-code%2F&amp;#38;linkname=Devfiles%20and%20Kubernetes%20cluster%20support%20in%20OpenShift%20Connector%200.2.0%20extension%20for%20VS%20Code" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F16%2Fdevfiles-and-kubernetes-cluster-support-in-openshift-connector-0-2-0-extension-for-vs-code%2F&amp;#38;linkname=Devfiles%20and%20Kubernetes%20cluster%20support%20in%20OpenShift%20Connector%200.2.0%20extension%20for%20VS%20Code" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F16%2Fdevfiles-and-kubernetes-cluster-support-in-openshift-connector-0-2-0-extension-for-vs-code%2F&amp;#38;linkname=Devfiles%20and%20Kubernetes%20cluster%20support%20in%20OpenShift%20Connector%200.2.0%20extension%20for%20VS%20Code" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F16%2Fdevfiles-and-kubernetes-cluster-support-in-openshift-connector-0-2-0-extension-for-vs-code%2F&amp;#038;title=Devfiles%20and%20Kubernetes%20cluster%20support%20in%20OpenShift%20Connector%200.2.0%20extension%20for%20VS%20Code" data-a2a-url="https://developers.redhat.com/blog/2020/11/16/devfiles-and-kubernetes-cluster-support-in-openshift-connector-0-2-0-extension-for-vs-code/" data-a2a-title="Devfiles and Kubernetes cluster support in OpenShift Connector 0.2.0 extension for VS Code"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/16/devfiles-and-kubernetes-cluster-support-in-openshift-connector-0-2-0-extension-for-vs-code/"&gt;Devfiles and Kubernetes cluster support in OpenShift Connector 0.2.0 extension for VS Code&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/yV6nNttALg0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;We are pleased to announce that the new release of the OpenShift Connector extension for Visual Studio Code (VS Code) is now available. The 0.2.0 release offers new features for rapidly developing and deploying code on Kubernetes and Red Hat OpenShift clusters. OpenShift Connector now supports component deployment using devfiles, leveraging odo 2.0 command-line interface under [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/16/devfiles-and-kubernetes-cluster-support-in-openshift-connector-0-2-0-extension-for-vs-code/"&gt;Devfiles and Kubernetes cluster support in OpenShift Connector 0.2.0 extension for VS Code&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/11/16/devfiles-and-kubernetes-cluster-support-in-openshift-connector-0-2-0-extension-for-vs-code/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">805727</post-id><dc:creator>Mohit Suman</dc:creator><dc:date>2020-11-16T08:00:43Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/11/16/devfiles-and-kubernetes-cluster-support-in-openshift-connector-0-2-0-extension-for-vs-code/</feedburner:origLink></entry><entry><title>How I built a serverless blog search with Java, Quarkus, and AWS Lambda</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/rxNaHtCbKjA/" /><category term="DevNation" /><category term="Java" /><category term="Quarkus" /><category term="Serverless" /><category term="Apache Lucene" /><category term="AWS Lambda" /><category term="GraalVM" /><category term="graalvm native" /><category term="serverless search" /><author><name>Gunnar Morling</name></author><id>https://developers.redhat.com/blog/?p=762447</id><updated>2020-11-13T08:00:50Z</updated><published>2020-11-13T08:00:50Z</published><content type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about serverless blog search with &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/quarkus/"&gt;Quarkus&lt;/a&gt;, and AWS Lambda from &lt;a href="https://developers.redhat.com/blog/author/gmorling/"&gt;Gunnar Morling&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/author/burrsutter/"&gt;Burr Sutter&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;A serverless application? With Java? Absolutely!&lt;/p&gt; &lt;p&gt;Join us for this session where we’ll discuss when &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;serverless&lt;/a&gt; is a great fit (and when it isn’t) and why you don’t need to leave the Java platform when going serverless. Based on the real-world example of a serverless blog search, you’ll learn how Quarkus and GraalVM help you build applications for AWS Lambda that are blazing fast to start up and are memory-efficient at the same time.&lt;/p&gt; &lt;p&gt;In a live demo, we’ll explore:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Which options Quarkus provides for creating AWS Lambda applications, making noticeable cold-start delays a thing of the past.&lt;/li&gt; &lt;li&gt;What it takes to enable existing libraries like Apache Lucene to be used in GraalVM-native binaries.&lt;/li&gt; &lt;li&gt;How to build serverless applications that are portable across platforms, avoiding lock-in to specific providers.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Bring your questions, too, and let’s exchange what we know about how Quarkus can help you to build serverless applications.&lt;/p&gt; &lt;p&gt;Watch the entire talk:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/7ptEPuo3L6s?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Learn more&lt;/h2&gt; &lt;p&gt;Join us at an &lt;a href="https://developers.redhat.com/events/"&gt;upcoming developer event&lt;/a&gt;, and see our collection of &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;past DevNation Tech Talks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F13%2Fhow-i-built-a-serverless-blog-search-with-java-quarkus-and-aws-lambda%2F&amp;#38;linkname=How%20I%20built%20a%20serverless%20blog%20search%20with%20Java%2C%20Quarkus%2C%20and%20AWS%20Lambda" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F13%2Fhow-i-built-a-serverless-blog-search-with-java-quarkus-and-aws-lambda%2F&amp;#38;linkname=How%20I%20built%20a%20serverless%20blog%20search%20with%20Java%2C%20Quarkus%2C%20and%20AWS%20Lambda" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F13%2Fhow-i-built-a-serverless-blog-search-with-java-quarkus-and-aws-lambda%2F&amp;#38;linkname=How%20I%20built%20a%20serverless%20blog%20search%20with%20Java%2C%20Quarkus%2C%20and%20AWS%20Lambda" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F13%2Fhow-i-built-a-serverless-blog-search-with-java-quarkus-and-aws-lambda%2F&amp;#38;linkname=How%20I%20built%20a%20serverless%20blog%20search%20with%20Java%2C%20Quarkus%2C%20and%20AWS%20Lambda" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F13%2Fhow-i-built-a-serverless-blog-search-with-java-quarkus-and-aws-lambda%2F&amp;#38;linkname=How%20I%20built%20a%20serverless%20blog%20search%20with%20Java%2C%20Quarkus%2C%20and%20AWS%20Lambda" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F13%2Fhow-i-built-a-serverless-blog-search-with-java-quarkus-and-aws-lambda%2F&amp;#38;linkname=How%20I%20built%20a%20serverless%20blog%20search%20with%20Java%2C%20Quarkus%2C%20and%20AWS%20Lambda" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F13%2Fhow-i-built-a-serverless-blog-search-with-java-quarkus-and-aws-lambda%2F&amp;#38;linkname=How%20I%20built%20a%20serverless%20blog%20search%20with%20Java%2C%20Quarkus%2C%20and%20AWS%20Lambda" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F13%2Fhow-i-built-a-serverless-blog-search-with-java-quarkus-and-aws-lambda%2F&amp;#038;title=How%20I%20built%20a%20serverless%20blog%20search%20with%20Java%2C%20Quarkus%2C%20and%20AWS%20Lambda" data-a2a-url="https://developers.redhat.com/blog/2020/11/13/how-i-built-a-serverless-blog-search-with-java-quarkus-and-aws-lambda/" data-a2a-title="How I built a serverless blog search with Java, Quarkus, and AWS Lambda"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/13/how-i-built-a-serverless-blog-search-with-java-quarkus-and-aws-lambda/"&gt;How I built a serverless blog search with Java, Quarkus, and AWS Lambda&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/rxNaHtCbKjA" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about serverless blog search with Java, Quarkus, and AWS Lambda from Gunnar Morling and Burr Sutter. A serverless application? With Java? [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/13/how-i-built-a-serverless-blog-search-with-java-quarkus-and-aws-lambda/"&gt;How I built a serverless blog search with Java, Quarkus, and AWS Lambda&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/11/13/how-i-built-a-serverless-blog-search-with-java-quarkus-and-aws-lambda/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">762447</post-id><dc:creator>Gunnar Morling</dc:creator><dc:date>2020-11-13T08:00:50Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/11/13/how-i-built-a-serverless-blog-search-with-java-quarkus-and-aws-lambda/</feedburner:origLink></entry><entry><title>Jakarta EE: Multitenancy with JPA on WildFly, Part 2</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/GkyaBbExvA0/" /><category term="Containers" /><category term="DevOps" /><category term="Java" /><category term="Open source" /><category term="Jakarta EE" /><category term="java beans" /><category term="multi-tenancy" /><category term="persistence api" /><category term="WildFly" /><author><name>rhsilva</name></author><id>https://developers.redhat.com/blog/?p=742387</id><updated>2020-11-12T08:00:17Z</updated><published>2020-11-12T08:00:17Z</published><content type="html">&lt;p&gt;This is the second half of a two-part article about multitenancy with the Jakarta Persistence API (JPA) on WildFly. In &lt;a href="https://developers.redhat.com/blog/2020/06/15/jakarta-ee-multitenancy-with-jpa-on-wildfly-part-1/"&gt;Part 1&lt;/a&gt;, I showed you how to implement multitenancy using a database. In Part 2, I&amp;#8217;ll show you how to implement multitenancy using a schema and the &lt;a target="_blank" rel="nofollow" href="https://projects.eclipse.org/projects/ee4j.jpa"&gt;Jakarta Persistence API&lt;/a&gt; (JPA) on &lt;a target="_blank" rel="nofollow" href="https://wildfly.org/"&gt;WildFly&lt;/a&gt;. You&amp;#8217;ll learn how to implement JPA&amp;#8217;s &lt;code&gt;CurrentTenantIdentifierResolver&lt;/code&gt; and &lt;code&gt;MultiTenantConnectionProvider&lt;/code&gt; interfaces, and how to use JPA’s &lt;code&gt;persistence.xml&lt;/code&gt; file to configure the required classes based on these interfaces.&lt;/p&gt; &lt;h2&gt;Implementation code&lt;/h2&gt; &lt;p&gt;The first part of this article offers a conceptual overview of multitenancy with JPA on WildFly and an example of multitenancy using a database. This second part shifts the focus to multitenancy using a schema and JPA. In this case, I assume that WildFly manages the data source and connection pool and that EJB (&lt;a target="_blank" rel="nofollow" href="https://jakarta.ee/specifications/enterprise-beans/"&gt;Jakarta Enterprise Beans&lt;/a&gt;) handles the container-managed transactions.&lt;/p&gt; &lt;h3&gt;Two interfaces for multitenancy&lt;/h3&gt; &lt;p&gt;As I explained in my previous article, two interfaces are crucial for implementing multitenancy in JPA and Hibernate:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The &lt;strong&gt;MultiTenantConnectionProvider&lt;/strong&gt; interface is responsible for connecting tenants to their respective databases and services. We will use this interface and a tenant identifier to switch between databases for different tenants.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;CurrentTenantIdentifierResolver&lt;/strong&gt; is responsible for identifying the tenant. We will use this interface to define what is considered a tenant (more about this later) and to provide the correct tenant identifier to &lt;code&gt;MultiTenantConnectionProvider&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Next, we&amp;#8217;ll look at the three classes that implement these interfaces.&lt;/p&gt; &lt;h3&gt;SchemaMultiTenantProvider&lt;/h3&gt; &lt;p&gt;&lt;code&gt;SchemaMultiTenantProvider&lt;/code&gt; is an implementation of the &lt;code&gt;MultiTenantConnectionProvider&lt;/code&gt; interface. This class contains logic to switch to the schema that matches the given tenant identifier.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;SchemaMultiTenantProvider&lt;/code&gt; class also implements the &lt;code&gt;ServiceRegistryAwareService&lt;/code&gt;, which allows us to inject a service during the configuration phase. Here’s the code for the &lt;code&gt;SchemaMultiTenantProvider&lt;/code&gt; class:&lt;/p&gt; &lt;pre&gt;public class SchemaMultiTenantProvider implements MultiTenantConnectionProvider, ServiceRegistryAwareService { private static final long serialVersionUID = 1L; private static final String TENANT_SUPPORTED = "SCHEMA"; private DataSource dataSource; private String typeTenancy ; @Override public boolean supportsAggressiveRelease() { return false; } @Override public void injectServices(ServiceRegistryImplementor serviceRegistry) { typeTenancy = (String) ((ConfigurationService)serviceRegistry .getService(ConfigurationService.class)) .getSettings().get("hibernate.multiTenancy"); dataSource = (DataSource) ((ConfigurationService)serviceRegistry .getService(ConfigurationService.class)) .getSettings().get("hibernate.connection.datasource"); } @SuppressWarnings("rawtypes") @Override public boolean isUnwrappableAs(Class clazz) { return false; } @Override public &amp;#60;T&amp;#62; T unwrap(Class&amp;#60;T&amp;#62; clazz) { return null; } @Override public Connection getAnyConnection() throws SQLException { final Connection connection = dataSource.getConnection(); resetConnection(connection);// To make sure the connection start using schema/database default. return connection; } @Override public Connection getConnection(String tenantIdentifier) throws SQLException { //Just use the multitenancy if the hibernate.multiTenancy == SCHEMA if(TENANT_SUPPORTED.equals(typeTenancy)) { try { final Connection connection = getAnyConnection(); connection.createStatement().execute("SET SCHEMA '" + tenantIdentifier + "'"); return connection; } catch (final SQLException e) { throw new HibernateException("Error trying to alter schema [" + tenantIdentifier + "]", e); } } return getAnyConnection(); } @Override public void releaseAnyConnection(Connection connection) throws SQLException { //As the Wildfly/JBoss has the Container-Managed Container change the SCHEMA in the end can be dangerous (SET SCHEMA 'public'). //Thus it just closes the connection. connection.close(); } private void resetConnection(Connection connection){ if(TENANT_SUPPORTED.equals(typeTenancy)) { try { connection.createStatement().execute("SET SCHEMA 'public'"); } catch (final SQLException e) { throw new HibernateException("Error trying to alter schema [public]", e); } } } @Override public void releaseConnection(String tenantIdentifier, Connection connection) throws SQLException { releaseAnyConnection(connection); } } &lt;/pre&gt; &lt;p&gt;As you can see, we call the &lt;code&gt;injectServices&lt;/code&gt; method to populate the &lt;code&gt;datasource&lt;/code&gt; and &lt;code&gt;typeTenancy&lt;/code&gt; attributes. We use the &lt;code&gt;datasource&lt;/code&gt; attribute to get a connection from the data source, and we use the &lt;code&gt;typeTenancy&lt;/code&gt; attribute to find out if the class supports the &lt;code&gt;multiTenancy&lt;/code&gt; type. We call the &lt;code&gt;getConnection&lt;/code&gt; method to get a data source connection. This method uses the tenant identifier to locate and switch to the correct schema.&lt;/p&gt; &lt;h3&gt;MultiTenantResolver&lt;/h3&gt; &lt;p&gt;&lt;code&gt;MultiTenantResolver&lt;/code&gt; is a simple, abstract class that implements the &lt;code&gt;CurrentTenantIdentifierResolver&lt;/code&gt; interface. This class aims to provide a &lt;code&gt;setTenantIdentifier&lt;/code&gt; method to all &lt;code&gt;CurrentTenantIdentifierResolver&lt;/code&gt; implementations:&lt;/p&gt; &lt;pre&gt;public abstract class MultiTenantResolver implements CurrentTenantIdentifierResolver { protected String tenantIdentifier; public void setTenantIdentifier(String tenantIdentifier) { this.tenantIdentifier = tenantIdentifier; } } &lt;/pre&gt; &lt;p&gt;We only use this class to provide the &lt;code&gt;setTenantIdentifier&lt;/code&gt; method.&lt;/p&gt; &lt;h3&gt;SchemaTenantResolver&lt;/h3&gt; &lt;p&gt;&lt;code&gt;SchemaTenantResolver&lt;/code&gt; also implements the &lt;code&gt;CurrentTenantIdentifierResolver&lt;/code&gt; interface. This class is the concrete class of &lt;code&gt;MultiTenantResolver&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;public class SchemaTenantResolver extends MuiltiTenantResolver { private Map&amp;#60;String, String&amp;#62; userDatasourceMap; public SchemaTenantResolver(){ userDatasourceMap = new HashMap(); userDatasourceMap.put("default", "public"); userDatasourceMap.put("username1", "usernameone"); userDatasourceMap.put("username2", "usernametwo"); } @Override public String resolveCurrentTenantIdentifier() { if(this.tenantIdentifier != null &amp;#38;&amp;#38; userDatasourceMap.containsKey(this.tenantIdentifier)){ return userDatasourceMap.get(this.tenantIdentifier); } return userDatasourceMap.get("default"); } @Override public boolean validateExistingCurrentSessions() { return false; } } &lt;/pre&gt; &lt;p&gt;Notice that &lt;code&gt;SchemaTenantResolver&lt;/code&gt; uses a &lt;code&gt;Map&lt;/code&gt; to define the correct schema for a given tenant. The tenant, in this case, is mapped by the user.&lt;/p&gt; &lt;h2&gt;Configure and define the tenant&lt;/h2&gt; &lt;p&gt;Now, we need to use JPA&amp;#8217;s &lt;code&gt;persistence.xml&lt;/code&gt; file to configure the tenant:&lt;/p&gt; &lt;pre&gt;&amp;#60;persistence&amp;#62; &amp;#60;persistence-unit name="jakartaee8"&amp;#62; &amp;#60;jta-data-source&amp;#62;jdbc/MyDataSource&amp;#60;/jta-data-source&amp;#62; &amp;#60;properties&amp;#62; &amp;#60;property name="javax.persistence.schema-generation.database.action" value="none" /&amp;#62; &amp;#60;property name="hibernate.dialect" value="org.hibernate.dialect.PostgresPlusDialect"/&amp;#62; &lt;strong&gt;&amp;#60;property name="hibernate.multiTenancy" value="SCHEMA"/&amp;#62;&lt;/strong&gt; &lt;strong&gt;&amp;#60;property name="hibernate.tenant_identifier_resolver" value="net.rhuanrocha.dao.multitenancy.SchemaTenantResolver"/&amp;#62;&lt;/strong&gt; &lt;strong&gt; &amp;#60;property name="hibernate.multi_tenant_connection_provider" value="net.rhuanrocha.dao.multitenancy.SchemaMultiTenantProvider"/&amp;#62;&lt;/strong&gt; &amp;#60;/properties&amp;#62; &amp;#60;/persistence-unit&amp;#62; &amp;#60;/persistence&amp;#62; &lt;/pre&gt; &lt;p&gt;We define the tenant in the JPA and Hibernate &lt;code&gt;EntityManagerFactory&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;@PersistenceUnit protected EntityManagerFactory emf; protected EntityManager getEntityManager(String multitenancyIdentifier){ final MuiltiTenantResolver tenantResolver = (&lt;strong&gt;MuiltiTenantResolver&lt;/strong&gt;) ((SessionFactoryImplementor) emf).getCurrentTenantIdentifierResolver(); &lt;strong&gt; tenantResolver.setTenantIdentifier(multitenancyIdentifier);&lt;/strong&gt; return emf.createEntityManager(); } &lt;/pre&gt; &lt;p&gt;Note that we call the &lt;code&gt;setTenantIdentifier&lt;/code&gt; before creating a new instance of &lt;code&gt;EntityManager&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This article presented a simple example of multitenancy using a schema in a database. There are many ways to use a database for multitenancy. My point has been to show you how to implement the &lt;code&gt;CurrentTenantIdentifierResolver&lt;/code&gt; and &lt;code&gt;MultiTenantConnectionProvider&lt;/code&gt; interfaces. I&amp;#8217;ve also shown you how to use JPA&amp;#8217;s &lt;code&gt;persistence.xml&lt;/code&gt; to configure the required classes based on the two interfaces.&lt;/p&gt; &lt;p&gt;Keep in mind that for this example, I have assumed that WildFly manages the data source and connection pool and that we&amp;#8217;re using enterprise beans for the container-managed transactions. If you want to go deeper with this example, you can &lt;a target="_blank" rel="nofollow" href="https://github.com/rhuan080/multitenancyJpaJakartaEE"&gt;find the complete application code and further instructions&lt;/a&gt; on my GitHub repository.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F12%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-2%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%202" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F12%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-2%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%202" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F12%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-2%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%202" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F12%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-2%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%202" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F12%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-2%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%202" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F12%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-2%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%202" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F12%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-2%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%202" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F12%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-2%2F&amp;#038;title=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%202" data-a2a-url="https://developers.redhat.com/blog/2020/11/12/jakarta-ee-multitenancy-with-jpa-on-wildfly-part-2/" data-a2a-title="Jakarta EE: Multitenancy with JPA on WildFly, Part 2"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/12/jakarta-ee-multitenancy-with-jpa-on-wildfly-part-2/"&gt;Jakarta EE: Multitenancy with JPA on WildFly, Part 2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/GkyaBbExvA0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;This is the second half of a two-part article about multitenancy with the Jakarta Persistence API (JPA) on WildFly. In Part 1, I showed you how to implement multitenancy using a database. In Part 2, I&amp;#8217;ll show you how to implement multitenancy using a schema and the Jakarta Persistence API (JPA) on WildFly. You&amp;#8217;ll learn [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/12/jakarta-ee-multitenancy-with-jpa-on-wildfly-part-2/"&gt;Jakarta EE: Multitenancy with JPA on WildFly, Part 2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/11/12/jakarta-ee-multitenancy-with-jpa-on-wildfly-part-2/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">742387</post-id><dc:creator>rhsilva</dc:creator><dc:date>2020-11-12T08:00:17Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/11/12/jakarta-ee-multitenancy-with-jpa-on-wildfly-part-2/</feedburner:origLink></entry><entry><title>WildFly 22 Alpha1 is released!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/-MUjipp7mu0/" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><author><name>Brian Stansberry</name></author><id>searchisko:content:id:jbossorg_blog-wildfly_22_alpha1_is_released</id><updated>2020-11-12T00:00:00Z</updated><published>2020-11-12T00:00:00Z</published><content type="html">I’m pleased to announce that the WildFly 22 Alpha1 zips are now available . This includes the first release of a new 'WildFly Preview' distribution of WildFly, which we’re using to give our community a tech preview look at things we see coming down the road in our main WildFly distribution. Right now this is mostly about what we are doing with Jakarta EE 9, although there are some other differences that I’ll get into below. We don’t normally do alpha releases of WildFly, but we’re overdue to give our community a look at what we’re doing on EE 9. I believe what we have can be a useful milestone for people wanting an early look at where we’re going, so here it is! WILDFLY PREVIEW AND JAKARTA EE 9 It’s exciting to see the great progress the Jakarta EE community has made on the way to the upcoming GA release of Jakarta EE 9! As I discussed in my , the EE 9 release is primarily about implementing the necessary change in the Jakarta EE APIs from the javax.* package namespace to the jakarta.* namespace. This is a big change that is going to take a while to percolate through the EE ecosystem, e.g. for the many projects that compile against the EE APIs to provide versions that use jakarta.*. While this happens we want to continue to deliver new features and fixes to our community, so the primary WildFly distribution will continue to provide the EE 8 APIs. But, we want the community to begin to look at EE 9, so we decided to produce a new distribution of WildFly, which we’re calling WildFly Preview. With WildFly 22 Alpha1 we’re providing the first download of WildFly Preview. EE 9 VIA BYTECODE TRANSFORMATION AND THE 'WILDFLY-PREVIEW' GALLEON FEATURE PACK The large majority of the libraries included in WildFly Preview that were compiled against EE APIs were based on the javax.* EE 8 APIs. This includes the libraries produced from WildFly’s own code base and by WildFly Core. But the EE APIs libraries available in the WildFly Preview runtime all use the jakarta.* packages. How can this work? The solution we’ve come up with for this is to provide a new 'wildfly-preview' Galleon feature pack, in addition to the standard 'wildfly' feature pack. (Recall that any WildFly server installation, including the ones that are zipped up and made available for download here, is produced by telling Galleon tooling to provision from a feature pack.) The 'wildfly-preview' feature pack differs from the standard 'wildfly' one in a number of ways, with the key ones relevant to EE 9 being: * Where suitable EE 9 spec API jars were available from Eclipse, those were used instead of the EE 8 spec jars used in standard WildFly. * Where suitable 'native' EE 9 implementation libraries (i.e. ones compiled against jakarta.*) were available, those were used. This includes Weld, Hibernate Validator, Mojarra, Yasson, Jakarta EL and Jakarta JSON. * Any libraries that were using EE 8 APIs were detected and instructions were incorporated in the feature pack telling Galleon to do byte code transformation of that library whenever it provisions a server using the feature pack. The last item is the key point. When Galleon provisions a 'wildfly-preview' server by pulling jars down from maven, it knows that some artifacts were compiled against EE 8 javax.* packages. So it bytecode transforms those jars to alter references to EE 8 packages in the class file constant tables to change from javax.* to jakarta.*. The transformation goes beyond simple package renames; a number of other known differences between EE 8 and EE 9 are handled. We owe a great deal of thanks to B.J. Hargrave and the community behind the project for their work on the underlying transformation tool. You can use the Galleon CLI tool to provision a server from the wildfly-preview feature pack yourself: galleon.sh install wildfly-preview:current#22.0.0.Alpha1 --dir=my-wildfly-server Note the use of 'wildfly-preview' instead of 'wildfly'. Because this release is an alpha, Galleon won’t try to install it by default if you don’t give it explicit instructions to do so. So I include the '#22.0.0.Alpha1' in the feature pack location string. Another way to do this is to explicitly state that an alpha feature pack frequency is acceptable: galleon.sh install wildfly-preview:current/alpha --dir=my-wildfly-server As Galleon provisions the server it will log quite a bit of information about the transformation work it is doing. Please note that the transformation adds a fair bit to the amount of time it takes to provision the server. WILDFLY PREVIEW SUPPORT FOR EE 8 DEPLOYMENTS The APIs that WildFly Preview exposes to deployments are the EE 9 APIs, so all the classes and interfaces are in the jakarta.* packages. But what if you want to run an existing EE 8 application on WildFly Preview? We expect that to be a very important use case in the long run. Eventually the jakarta.* APIs will be what’s provided by the standard WildFly distribution, but many WildFly users will have existing applications that they’ll want to continue to run unchanged. So we wanted to make sure from the very beginning that that works. What we’ve done is we’ve added to the server’s handling of managed deployments the same basic transformation that’s applied to the server artifacts when provisioning. A managed deployment is one where a management client (the CLI, HAL console or the deployment scanner) presents deployment content to the server and the server makes a copy of it in its internal deployment content repository. The content that gets installed into the runtime is that internal copy. A WildFly Preview server, when it reads in deployment content to store in the content repository, will transform any EE 8 content into EE 9. In the long run I feel it’s better for users if they either convert their application source to EE 9 APIs, or use build-time tooling that we and the rest of the Jakarta community will work to provide to do transformation at build time. But some applications just can’t be changed, so the server-side solution we’re using can handle those cases. Confession: beyond wanting to make sure EE 8 deployments can run for users, we need it to work for ourselves. The WildFly testsuite is full of hundreds of EE 8 deployments. We want to be able to run those tests aganst WildFly Preview, so we needed to make this work. OTHER DIFFERENCES IN WILDFLY PREVIEW Besides exposing EE 9 APIs, we want to use WildFly Preview to help get community exposure for other changes we plan to make in the server. Here are the key ones: * The legacy security subsytem is not supported. The standard configurations are all based on Elytron security. Our goal is to remove the underlying Picketbox libraries altogether in the next few months. This is an important prerequisite for supporting JDK 14 or later. When we do this, security vault support will be removed as well. Elytron credential stores should be used. * The security vault tool (used to manipulate vault contents) is not provided. * The standard configuration files do not configure an embedded messaging broker. Instead they configure the 'messaging-activemq' subsystem to provide connections to a remote ActiveMQ Artemis broker. (It’s a task for the user to run such a broker or to update the config to integrate with a different broker.) We want WildFly out-of-the-box to be more of a cloud native appserver and having an embedded messaging broker in the default configuration is not cloud native. A WildFly container in the cloud running an embedded broker is not scalable, as multiple broker instances need separate configuration to act as a primary or backup. An embedded messaging broker also has more advanced persistent storage requirements than a server primarily dedicated to handling HTTP requests would have. Note however that running an embedded broker is still supported. We’ve added an example 'standalone-activemq-embedded.xml' configuration showing its use to the $WILDFLY_HOME/docs/examples/configs folder. * The Picketlink extension is removed. * The JSR-77 extension is removed. * The extensions providing the legacy subsystems 'cmp', 'config-admin', 'jacorb', 'jaxr', 'messaging' (HornetQ based), and 'web' (not 'undertow') are removed. These were only used for domain mode to allow a Domain Controller to control hosts running much earlier WildFly versions where servers using these subsystems were supported. KNOWN ISSUES Please understand that WildFly Preview is a true alpha, so you may find issues if you try it for your use case. If you do, please report them on the . There are a number of known issues: * WildFly Preview does not pass the EE 9 platform TCK. We currently have 193 failures (out of over 40,000 tests). These are mostly in the webservices area. * The bootable jar feature we’ve been rolling out over the last few WildFly releases does not support WildFly Preview yet. * JBoss Modules modules installed by the user are not transformed. If such a module uses EE 8 APIs it will not work. * Deployment overlays are not transformed. So any overlay artifact that uses EE 8 APIs will not work. * Unmanaged deployments that use EE 8 APIs will not work. We transform managed deployments when we copy the deployment content into the internal content repo. For unmanaged deployments we use the original content file(s) the user provides, and WildFly won’t modify those files as we don’t consider them as being 'owned' by the server. * Managed exploded deployments likely won’t work. * Applications incorporating the EE 9 variant of the will not work. The EE 8 variant, which should be semantically equivalent, should work. * Alternate JPA and JSF providers that you can install with standard WildFly are not supported. Note that the current lack of support for parsing EE 9 WSDL customization descriptors means our test coverage of EE 9 Jakarta XML Web Services applications is less robust than it is for most other EE technologies. LOOKING FORWARD The near term priorities for WildFly Preview are to continue to progress on the EE 9 TCK and to get bootable jar support working. We’ll strive to continue to improve the speed of the transformation process. And as more 'native' EE 9 variants of the libraries we use become available we’ll update WildFly Preview to incorporate those. Later on we’ll work to handle transforming deployment overlays and perhaps to handle JBoss Modules modules added by the user. JIRA RELEASE NOTES The full list of issues resolved is available . Issues resolved in the WildFly Core 14 Beta1 release included with WildFly 22 are available . ENJOY! We hope you enjoy WildFly 22 Alpha1. Please give it a try, particularly WildFly Preview, and . But most important, please stay safe and well!&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/-MUjipp7mu0" height="1" width="1" alt=""/&gt;</content><summary>I’m pleased to announce that the WildFly 22 Alpha1 zips are now available . This includes the first release of a new 'WildFly Preview' distribution of WildFly, which we’re using to give our community a tech preview look at things we see coming down the road in our main WildFly distribution. Right now this is mostly about what we are doing with Jakarta EE 9, although there are some other difference...</summary><dc:creator>Brian Stansberry</dc:creator><dc:date>2020-11-12T00:00:00Z</dc:date><feedburner:origLink>https://wildfly.org//news/2020/11/12/Jakarta-EE-9-with-WildFly-Preview/</feedburner:origLink></entry><entry><title>Open Source Monetization Ecosystem Review</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/65m6lxYC718/open-source-monetization-ecosystem.html" /><category term="Blockchain" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_ofbizian" scheme="searchisko:content:tags" /><category term="monetization" scheme="searchisko:content:tags" /><category term="open source" scheme="searchisko:content:tags" /><category term="sustainability" scheme="searchisko:content:tags" /><author><name>Bilgin Ibryam</name></author><id>searchisko:content:id:jbossorg_blog-open_source_monetization_ecosystem_review</id><updated>2020-11-11T11:34:52Z</updated><published>2020-11-11T11:34:00Z</published><content type="html">Open source is a distributed innovation model that lacks distributed funding. It allows individuals with a common passion to collaborate and produce value but not capture it. It is a production factory, without a sales counter. That is why many open source contributors are not getting a fair return. That is why many companies capture value from open source but without paying back. That is why many independent open source builders use alternative means to fund themselves. That is why open source is not a business model. It is a production model, monetization not-included. But there is hope, there is change. &lt;br /&gt;&lt;p&gt;&lt;/p&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-daPhx9K02tM/X6vEUDEvEjI/AAAAAAAAO7o/nKQBPHHHwPAh8-RU9zCwBFtTsPKQv15yQCLcBGAsYHQ/s1682/monetization_for_individuals.png" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" data-original-height="710" data-original-width="1682" height="169" src="https://1.bp.blogspot.com/-daPhx9K02tM/X6vEUDEvEjI/AAAAAAAAO7o/nKQBPHHHwPAh8-RU9zCwBFtTsPKQv15yQCLcBGAsYHQ/w400-h169/monetization_for_individuals.png" width="400" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;i&gt;Open source monetization journey for individuals&lt;/i&gt;&lt;/td&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Open source is an innovation model and it is going to innovate its monetization too. There are new &lt;a href="https://www.oss.fund/" target="_blank"&gt;ways&lt;/a&gt; for fans to support the creative work of open source builders. There are ways to create online courses and monetize knowledge. There are new ways to create digital goods with accompanying services and sell them online for a fiver. Ways to start newsletters and make money from your audience. Ways to measure an open source contributor's merit, incentivize it, and trade it. Decentralized protocols for staking tokens and support open source through interest rather than donations.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-4BnDlbgBPt0/X6vH5nTprzI/AAAAAAAAO70/TEUF4NEezbMutxYmt2HcTmkm4xF0r7ukACLcBGAsYHQ/s2508/Bilgin%2BIbryam.jpg" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" data-original-height="1254" data-original-width="2508" height="200" src="https://1.bp.blogspot.com/-4BnDlbgBPt0/X6vH5nTprzI/AAAAAAAAO70/TEUF4NEezbMutxYmt2HcTmkm4xF0r7ukACLcBGAsYHQ/w400-h200/Bilgin%2BIbryam.jpg" width="400" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;i&gt;99 Ways to Make Money with Open Source as an Individual&lt;/i&gt;&lt;/td&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;br /&gt;&lt;/td&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;br /&gt;&lt;/td&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;br /&gt;&lt;/td&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;There is an open source monetization revolution happening right now and I'll explore the whole spectrum of open source monetization projects at &lt;a href="https://2020.opencoresummit.com/" target="_blank"&gt;Open Core Summit Digital&lt;/a&gt;. Join me on December 16th-18th where I will talk about "&lt;i&gt;99 Ways to Make Money with Open Source as an Individual&lt;/i&gt;".&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/65m6lxYC718" height="1" width="1" alt=""/&gt;</content><summary>Open source is a distributed innovation model that lacks distributed funding. It allows individuals with a common passion to collaborate and produce value but not capture it. It is a production factory, without a sales counter. That is why many open source contributors are not getting a fair return. That is why many companies capture value from open source but without paying back. That is why many...</summary><dc:creator>Bilgin Ibryam</dc:creator><dc:date>2020-11-11T11:34:00Z</dc:date><feedburner:origLink>http://www.ofbizian.com/2020/11/open-source-monetization-ecosystem.html</feedburner:origLink></entry><entry><title>Leading the future of Java with the Red Hat build of Quarkus 1.7</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/JDRae5GgG6E/" /><category term="Java" /><category term="Kubernetes" /><category term="Quarkus" /><category term="Serverless" /><category term="apache maven" /><category term="GraalVM" /><category term="knative serving" /><category term="kubernetes-native" /><category term="openshift" /><author><name>jebeck</name></author><id>https://developers.redhat.com/blog/?p=814877</id><updated>2020-11-11T03:55:40Z</updated><published>2020-11-11T03:55:40Z</published><content type="html">&lt;p&gt;&lt;img class="wp-image-814927 size-medium alignleft" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/quarkus_logo_horizontal_rgb_600px_default-300x46.png" alt="" width="300" height="46" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/quarkus_logo_horizontal_rgb_600px_default-300x46.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/quarkus_logo_horizontal_rgb_600px_default.png 601w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;The latest supported version of the &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Red Hat build of Quarkus&lt;/a&gt; continues to drive the future of &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java development&lt;/a&gt; for &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;-native and &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/topics/cloud-native-apps/what-is-serverless"&gt;serverless&lt;/a&gt; applications. This article introduces the technologies making it easier than ever to create fast, lightweight Java applications for &lt;a href="https://developers.redhat.com/topics/containers"&gt;container-based&lt;/a&gt; and serverless environments using the Red Hat build of Quarkus 1.7.&lt;/p&gt; &lt;h2&gt;Native code compilation&lt;/h2&gt; &lt;p&gt;Developers using the Red Hat build of Quarkus can now choose between deploying natively compiled code or JVM-based code depending on an application&amp;#8217;s needs. Natively compiled Quarkus applications are extremely fast and memory-efficient, making Quarkus a great choice for serverless and high-density cloud deployments. Quarkus 1.7&amp;#8217;s support for native executables is provided by &lt;a href="https://developers.redhat.com/blog/2020/06/05/mandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus/"&gt;Mandrel&lt;/a&gt;, a downstream distribution of GraalVM based on OpenJDK 11.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: See &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/blog/key-findings-idc-red-hat-quarkus-lab-validation"&gt;this summary&lt;/a&gt; of the recently published &lt;i&gt;Quarkus IDC Lab Validation Report&lt;/i&gt; for more about how Quarkus performs compared to traditional Java frameworks.&lt;/p&gt; &lt;h2&gt;Additional features and capabilities&lt;/h2&gt; &lt;p&gt;The Red Hat build of Quarkus 1.7 includes these additional features and capabilities:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/courses/openshift/playground-openshift"&gt;Red Hat OpenShift 4.5&lt;/a&gt; certification for &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/4966181"&gt;supported configurations&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Support for &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;Red Hat OpenShift Serverless&lt;/a&gt; (&lt;a target="_blank" rel="nofollow" href="https://github.com/knative/serving"&gt;Knative Serving&lt;/a&gt;).&lt;/li&gt; &lt;li&gt;Integration with Red Hat Data Grid 8 (&lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/infinispan-client"&gt;Infinispan client&lt;/a&gt;) and Red Hat&amp;#8217;s single sign-on technology (&lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/security-keycloak-authorization"&gt;Keycloak&lt;/a&gt;).&lt;/li&gt; &lt;li&gt;Spring compatibility enhancements for &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/spring-cache"&gt;cache&lt;/a&gt;, config, and scheduled.&lt;/li&gt; &lt;li&gt;The &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/grpc-getting-started"&gt;gRPC&lt;/a&gt; extension for remote procedure calls.&lt;/li&gt; &lt;li&gt;Support for the &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/getting-started-reactive#mutiny"&gt;Mutiny&lt;/a&gt; reactive framework.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;The gRPC extension and remote development&lt;/h3&gt; &lt;p&gt;One of the founding principles of Quarkus is to &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/vision/developer-joy"&gt;bring Java developers joy&lt;/a&gt;. Quarkus delivers on this promise by providing developers with tools and capabilities such as live coding, unified configuration, IDE plug-ins, and more. The Red Hat build of Quarkus also supports a &lt;a target="_blank" rel="nofollow" href="https://code.quarkus.io/"&gt;vast ecosystem of extensions&lt;/a&gt; for easily configuring, integrating, and compiling other frameworks and technologies. One such technology is the &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/blog/quarkus-grpc/"&gt;gRPC extension&lt;/a&gt;, which lets developers expose and consume remote procedure calls with Transport Layer Security (TLS) encryption and authentication.&lt;/p&gt; &lt;p&gt;Quarkus also provides a &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/maven-tooling#remote-development-mode"&gt;remote development mode&lt;/a&gt; that lets developers run Quarkus in container environments such as OpenShift. Changes to local files are immediately visible when in remote development mode.&lt;/p&gt; &lt;h3&gt;OpenShift and serverless deployments&lt;/h3&gt; &lt;p&gt;Its small memory footprint and fast boot times make Quarkus an ideal runtime for serverless applications. The Red Hat build of Quarkus is optimized for use with containers and &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift Container Platform&lt;/a&gt;. As a result, developers can easily deploy Kubernetes-native and serverless applications without worrying about the underlying infrastructure. The &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/deploying-to-openshift"&gt;Quarkus OpenShift extension&lt;/a&gt; lets you use Apache Maven in a single build command or the Source-to-Image (S2I) method to deploy Quarkus applications and Kubernetes resources on OpenShift. The Quarkus OpenShift extension also supports deploying Quarkus applications to OpenShift with Knative Serving installed. Knative Serving scales application services up and down depending on the load size.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: See the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_build_of_quarkus/1.7/"&gt;Red Hat Build of Quarkus 1.7&lt;/a&gt; documentation for more about &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_build_of_quarkus/1.7/html/deploying_quarkus_applications_on_red_hat_openshift_container_platform/index"&gt;deploying Quarkus applications on OpenShift&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_build_of_quarkus/1.7/html/deploying_a_red_hat_build_of_quarkus_application_as_a_openshift_serverless_service/index"&gt;as OpenShift Serverless services&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;More tools for developers&lt;/h3&gt; &lt;p&gt;In addition to the optimizations and integrations with OpenShift, the Red Hat build of Quarkus is also tightly integrated with Red Hat Data Grid 8 and Red Hat&amp;#8217;s single sign-on technology.&lt;/p&gt; &lt;p&gt;Red Hat Data Grid 8 is an in-memory, distributed, NoSQL datastore solution based on Infinispan. Using the Quarkus &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/infinispan-client"&gt;Infinispan extension&lt;/a&gt;, developers can connect to a Data Grid server running outside of application processes and create native executables. See &lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2020/10/15/securely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift/"&gt;Securely connect Quarkus and Red Hat Data Grid on Red Hat OpenShift&lt;/a&gt;&lt;/em&gt; for more about this technology.&lt;/p&gt; &lt;p&gt;Red Hat&amp;#8217;s single sign-on technology provides support with securing web applications. The &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/security"&gt;Keycloak extension&lt;/a&gt; provides the architecture, authentication and authorization mechanisms, and other tools for creating production-quality security for your applications. See the DevNation Tech Talk, &lt;em&gt;&lt;a href="https://developers.redhat.com/videos/youtube/JvPBWPDQ940"&gt;Easily secure your cloud-native microservices with Keycloak&lt;/a&gt;&lt;/em&gt; to learn more about securing Quarkus microservices with single sign-on technology from Red Hat.&lt;/p&gt; &lt;h2&gt;What’s next for Quarkus?&lt;/h2&gt; &lt;p&gt;The Quarkus community is rapidly innovating and releasing updates. We will continue to mirror this innovation to support Java developers creating cloud-native applications with Quarkus. Future releases of the Red Hat build of Quarkus will add new features and capabilities to improve developer productivity. We will also continue to find ways to support developers in creating serverless applications beyond OpenShift.&lt;/p&gt; &lt;h2&gt;Get started with the Red Hat build of Quarkus 1.7&lt;/h2&gt; &lt;p&gt;For developers interested in getting started, the &lt;a target="_blank" rel="nofollow" href="http://code.quarkus.redhat.com/"&gt;Quarkus initializer&lt;/a&gt; is a powerful way to bootstrap your Quarkus application and discover its extensions ecosystem.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fleading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7%2F&amp;#38;linkname=Leading%20the%20future%20of%20Java%20with%20the%20Red%20Hat%20build%20of%20Quarkus%201.7" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fleading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7%2F&amp;#38;linkname=Leading%20the%20future%20of%20Java%20with%20the%20Red%20Hat%20build%20of%20Quarkus%201.7" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fleading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7%2F&amp;#38;linkname=Leading%20the%20future%20of%20Java%20with%20the%20Red%20Hat%20build%20of%20Quarkus%201.7" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fleading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7%2F&amp;#38;linkname=Leading%20the%20future%20of%20Java%20with%20the%20Red%20Hat%20build%20of%20Quarkus%201.7" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fleading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7%2F&amp;#38;linkname=Leading%20the%20future%20of%20Java%20with%20the%20Red%20Hat%20build%20of%20Quarkus%201.7" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fleading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7%2F&amp;#38;linkname=Leading%20the%20future%20of%20Java%20with%20the%20Red%20Hat%20build%20of%20Quarkus%201.7" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fleading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7%2F&amp;#38;linkname=Leading%20the%20future%20of%20Java%20with%20the%20Red%20Hat%20build%20of%20Quarkus%201.7" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fleading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7%2F&amp;#038;title=Leading%20the%20future%20of%20Java%20with%20the%20Red%20Hat%20build%20of%20Quarkus%201.7" data-a2a-url="https://developers.redhat.com/blog/2020/11/10/leading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7/" data-a2a-title="Leading the future of Java with the Red Hat build of Quarkus 1.7"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/10/leading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7/"&gt;Leading the future of Java with the Red Hat build of Quarkus 1.7&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/JDRae5GgG6E" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The latest supported version of the Red Hat build of Quarkus continues to drive the future of Java development for Kubernetes-native and serverless applications. This article introduces the technologies making it easier than ever to create fast, lightweight Java applications for container-based and serverless environments using the Red Hat build of Quarkus 1.7. Native code [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/10/leading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7/"&gt;Leading the future of Java with the Red Hat build of Quarkus 1.7&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/11/10/leading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">814877</post-id><dc:creator>jebeck</dc:creator><dc:date>2020-11-11T03:55:40Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/11/10/leading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7/</feedburner:origLink></entry></feed>
