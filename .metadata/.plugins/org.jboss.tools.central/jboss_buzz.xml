<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Develop Eclipse MicroProfile applications on Red Hat JBoss Enterprise Application Platform XP 2.0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/cmgVgrBpkwY/" /><category term="Containers" /><category term="DevOps" /><category term="Java" /><category term="Microservices" /><category term="codeready" /><category term="CodeReady Studio" /><category term="jboss" /><category term="MicroProfile" /><category term="MicroProfile Config" /><author><name>Emmanuel Hugonnet</name></author><id>https://developers.redhat.com/blog/?p=850617</id><updated>2021-01-12T08:00:45Z</updated><published>2021-01-12T08:00:45Z</published><content type="html">&lt;p&gt;This article shows you how to install &lt;a href="https://developers.redhat.com/products/eap/overview"&gt;Red Hat JBoss Enterprise Application Platform (JBoss EAP)&lt;/a&gt; XP 2.0.0 GA with support for Eclipse MicroProfile. Once you&amp;#8217;ve enabled Eclipse MicroProfile, you will be able to use its quickstart examples to start developing your own MicroProfile applications with &lt;a href="https://developers.redhat.com/products/codeready-studio/overview"&gt;Red Hat CodeReady Studio&lt;/a&gt;. In this demonstration, you&amp;#8217;ll learn two ways to build and run the &lt;a href="https://developers.redhat.com/cheat-sheets/microprofile-config"&gt;MicroProfile Config&lt;/a&gt; quickstart application.&lt;/p&gt; &lt;h2&gt;Installing JBoss EAP XP 2.0.0 GA&lt;/h2&gt; &lt;p&gt;To install JBoss EAP XP 2.0.0 GA:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Download the following software from the &lt;a href="https://developers.redhat.com/products/eap/download"&gt;product download page&lt;/a&gt;: &lt;ul&gt; &lt;li&gt;JBoss EAP XP 2.0.0 GA manager&lt;/li&gt; &lt;li&gt;JBoss EAP 7.3.4 GA patch&lt;/li&gt; &lt;li&gt;JBoss EAP XP 2.0.0 GA patch&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Apply the JBoss EAP 7.3.4 GA patch: &lt;pre&gt;$ patch apply /DOWNLOAD/PATH/jboss-eap-7.3.4-patch.zip &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Set up the JBoss EAP XP manager: &lt;pre&gt;$ java -jar jboss-eap-xp-2.0.0.GA-manager.jar setup --jboss-home=/INSTALL_PATH/jboss-eap-7.3 &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Apply the JBoss EAP XP 2.0 patch using the following management command: &lt;pre&gt;$ java -jar jboss-eap-xp-2.0.0.GA-manager.jar patch-apply --jboss-home=/INSTALL_PATH/jboss-eap-7.3 --patch=/DOWNLOAD/PATH/jboss-eap-xp-2.0.0.GA-patch.zip &lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Configuring CodeReady Studio&lt;/h2&gt; &lt;p&gt;To enable Eclipse MicroProfile support on JBoss EAP, we first need to register a runtime server for our newly installed JBoss EAP XP 2.0.0 instance. For this, we will create a new JBoss EAP 7.3 server called Red Hat JBoss EAP 7.3 XP 2.0.&lt;/p&gt; &lt;p&gt;The server will use a new JBoss EAP 7.3 XP 2.0 runtime that points to the runtime that we&amp;#8217;ve just installed. The JBoss EAP 7.3 XP 2.0 runtime uses the &lt;code&gt;standalone-microprofile.xml&lt;/code&gt; configuration file.&lt;/p&gt; &lt;p&gt;Select or enter the following configurations in the &lt;strong&gt;Define a New Server&lt;/strong&gt; dialog, as shown in Figure 1:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Select the server type &lt;b&gt;Red Hat JBoss Enterprise Application Platform 7.3&lt;/b&gt;.&lt;/li&gt; &lt;li&gt;Set the server’s hostname to &lt;b&gt;localhost&lt;/b&gt;.&lt;/li&gt; &lt;li&gt;Enter &lt;b&gt;Red Hat JBoss EAP 7.3 XP 2.0&lt;/b&gt; as the server name.&lt;/li&gt; &lt;li&gt;Click &lt;b&gt;Next&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;div id="attachment_850737" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_1.png"&gt;&lt;img aria-describedby="caption-attachment-850737" class="wp-image-850737 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_1-926x1024.png" alt="Create your new Red Hat JBoss EAP 7.3 XP 2.0 server." width="640" height="708" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_1-926x1024.png 926w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_1-271x300.png 271w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_1-768x849.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_1.png 954w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-850737" class="wp-caption-text"&gt;Figure 1: Define your new server.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The next screen invites you to create a new server adapter. Keep the defaults and select &lt;strong&gt;Create new runtime&lt;/strong&gt; to continue, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_850757" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_2.png"&gt;&lt;img aria-describedby="caption-attachment-850757" class="wp-image-850757 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_2-1019x1024.png" alt="Create a new Server Adapter." width="640" height="643" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_2-1019x1024.png 1019w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_2-150x150.png 150w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_2-300x300.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_2-768x772.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_2.png 1050w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-850757" class="wp-caption-text"&gt;Figure 2: Select &amp;#8216;Create new runtime&amp;#8217; to continue.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In the next dialog, you will configure your new runtime server. Enter the configurations shown in Figure 3:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Set the home directory if you don’t want to use the default setting.&lt;/li&gt; &lt;li&gt;Make sure your execution environment is set to &lt;b&gt;JavaSE-1.8&lt;/b&gt; (but you can use &lt;b&gt;JavaSE-11&lt;/b&gt;).&lt;/li&gt; &lt;li&gt;Change the settings for the server base directory and configuration file if you don’t want the defaults.&lt;/li&gt; &lt;li&gt;Click &lt;b&gt;Finish&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;div id="attachment_850767" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_3.png"&gt;&lt;img aria-describedby="caption-attachment-850767" class="wp-image-850767 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_3-1024x799.png" alt="An overview of the server's settings." width="640" height="499" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_3-1024x799.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_3-300x234.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_3-768x599.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_3.png 1352w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-850767" class="wp-caption-text"&gt;Figure 3: Configure the server runtime.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Before we can run the MicroProfile quickstarts (see Figure 5), we need to set the environment variables on our runtime. Navigate to the Red Hat JBoss EAP 7.3 XP 2.0 Server Overview dialog and click &lt;b&gt;Open launch configuration&lt;/b&gt;. You will see the option to set the environment variables, as shown in Figure 4.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Set &lt;b&gt;JAEGER_REPORTER_LOG_SPANS&lt;/b&gt; to &lt;b&gt;true&lt;/b&gt;.&lt;/li&gt; &lt;li&gt;Set &lt;b&gt;JAEGER_SAMPLER_PARAM&lt;/b&gt; to &lt;b&gt;1&lt;/b&gt;.&lt;/li&gt; &lt;li&gt;Set &lt;b&gt;JAEGER_SAMPLER_TYPE&lt;/b&gt; to &lt;b&gt;const&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;div id="attachment_850777" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_4.png"&gt;&lt;img aria-describedby="caption-attachment-850777" class="wp-image-850777 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_4-1024x1017.png" alt="The newly defined environment variables." width="640" height="636" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_4-1024x1017.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_4-150x150.png 150w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_4-300x298.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_4-768x762.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-create_server_4.png 1095w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-850777" class="wp-caption-text"&gt;Figure 4: Configure your runtime’s environment variables.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Running the Eclipse MicroProfile quickstarts&lt;/h2&gt; &lt;p&gt;The Eclipse MicroProfile quickstarts offer the following examples, which you can run and test on your installed server:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Eclipse MicroProfile Config&lt;/li&gt; &lt;li&gt;Eclipse MicroProfile Fault-tolerance&lt;/li&gt; &lt;li&gt;Eclipse MicroProfile Health&lt;/li&gt; &lt;li&gt;Eclipse MicroProfile JWT&lt;/li&gt; &lt;li&gt;Eclipse MicroProfile Metrics&lt;/li&gt; &lt;li&gt;Eclipse MicroProfile OpenAPI&lt;/li&gt; &lt;li&gt;Eclipse MicroProfile OpenTracing&lt;/li&gt; &lt;li&gt;Eclipse MicroProfile REST Client&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To turn on the quickstarts, open your project explorer, then select and import the &lt;code&gt;quickstart-parent&lt;/code&gt; &lt;code&gt;pom.xml&lt;/code&gt;. You will see the list of quickstarts shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_850797" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-projects_5.png"&gt;&lt;img aria-describedby="caption-attachment-850797" class="wp-image-850797 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-projects_5.png" alt="Project Explorer with quickstart-parent selected." width="640" height="643" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-projects_5.png 640w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-projects_5-150x150.png 150w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-projects_5-300x300.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-850797" class="wp-caption-text"&gt;Figure 5: Importing the quickstart parent turns on quickstarts.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Running the Eclipse MicroProfile Config quickstart&lt;/h2&gt; &lt;p&gt;There are two ways to run the Eclipse MicroProfile Config application: A bare-metal installation of JBoss EAP XP Server or a bootable JAR application. I&amp;#8217;ll show you how to do both.&lt;/p&gt; &lt;h3&gt;Bare-metal installation&lt;/h3&gt; &lt;p&gt;If you are installing &lt;code&gt;microprofile-config&lt;/code&gt; on bare metal, do the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Right-click on the &lt;b&gt;microprofile-config&lt;/b&gt; file.&lt;/li&gt; &lt;li&gt;Select &lt;b&gt;Run As&lt;/b&gt;.&lt;/li&gt; &lt;li&gt;Left-click &lt;b&gt;1 Run on Server&lt;/b&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;This configuration, shown in Figure 6, starts the server with the &lt;code&gt;microprofile-config&lt;/code&gt; application deployed.&lt;/p&gt; &lt;div id="attachment_851147" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-run_on_server_6.png"&gt;&lt;img aria-describedby="caption-attachment-851147" class="wp-image-851147" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-run_on_server_6.png" alt="Selections to run the microprofile-config project on a local server." width="640" height="683" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-run_on_server_6.png 810w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-run_on_server_6-281x300.png 281w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-run_on_server_6-768x820.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-851147" class="wp-caption-text"&gt;Figure 6: A bare-metal installation.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Install the application as a bootable JAR&lt;/h3&gt; &lt;p&gt;Instead of running your application on a bare-metal installation of JBoss EAP XP server, you can now package a JBoss EAP XP server and Eclipse MicroProfile application inside a bootable JAR. You can then run the application on a JBoss EAP XP bare-metal platform.&lt;/p&gt; &lt;p&gt;For demonstration purposes, we&amp;#8217;ve defined a Maven project for &lt;code&gt;microprofile-config&lt;/code&gt;. The project includes the following &lt;code&gt;bootable-jar&lt;/code&gt; profile:&lt;/p&gt; &lt;pre&gt; ---- &amp;#60;profile&amp;#62; &amp;#60;id&amp;#62;bootable-jar&amp;#60;/id&amp;#62; &amp;#60;build&amp;#62; &amp;#60;plugins&amp;#62; &amp;#60;plugin&amp;#62; &amp;#60;groupId&amp;#62;org.wildfly.plugins&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;wildfly-jar-maven-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;configuration&amp;#62; &amp;#60;feature-pack-location&amp;#62;org.jboss.eap:wildfly-galleon-pack:${version.server.bootable-jar}&amp;#60;/feature-pack-location&amp;#62; &amp;#60;layers&amp;#62; &amp;#60;layer&amp;#62;jaxrs-server&amp;#60;/layer&amp;#62; &amp;#60;layer&amp;#62;microprofile-platform&amp;#60;/layer&amp;#62; &amp;#60;/layers&amp;#62; &amp;#60;/configuration&amp;#62; &amp;#60;executions&amp;#62; &amp;#60;execution&amp;#62; &amp;#60;goals&amp;#62; &amp;#60;goal&amp;#62;package&amp;#60;/goal&amp;#62; &amp;#60;/goals&amp;#62; &amp;#60;/execution&amp;#62; &amp;#60;/executions&amp;#62; &amp;#60;/plugin&amp;#62; &amp;#60;/plugins&amp;#62; &amp;#60;/build&amp;#62; &amp;#60;/profile&amp;#62; ---- &lt;/pre&gt; &lt;p&gt;As you can see, we have selected the &lt;code&gt;jaxrs-server&lt;/code&gt; and the &lt;code&gt;microprofile-plateform&lt;/code&gt; layers to construct a slim version of the JBoss EAP XP server, which encapsulates our application. All you need to do is select the correct profile, as shown in Figure 7:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Right-click on the &lt;b&gt;pom.xml&lt;/b&gt;.&lt;/li&gt; &lt;li&gt;Navigate to &lt;b&gt;Maven&lt;/b&gt; and choose &lt;b&gt;Select Maven Profiles&lt;/b&gt;.&lt;/li&gt; &lt;li&gt;Check &lt;b&gt;bootable-jar&lt;/b&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_851157" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-select_maven_profile_7.png"&gt;&lt;img aria-describedby="caption-attachment-851157" class="wp-image-851157" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-select_maven_profile_7.png" alt="Dialog to select the apache Maven profile to use." width="640" height="735" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-select_maven_profile_7.png 873w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-select_maven_profile_7-261x300.png 261w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-select_maven_profile_7-768x882.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-851157" class="wp-caption-text"&gt;Figure 7: Select the Apache Maven profile.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Next, we need to build the bootable JAR using Apache Maven. Right-click on the &lt;code&gt;pom.xml&lt;/code&gt;. Then, go into the &lt;strong&gt;Run As&lt;/strong&gt; menu, and select &lt;strong&gt;9 Maven install&lt;/strong&gt;. Figure 8 shows these selections.&lt;/p&gt; &lt;div id="attachment_851167" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-build_bootable_jar_8.png"&gt;&lt;img aria-describedby="caption-attachment-851167" class="wp-image-851167" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-build_bootable_jar_8.png" alt="Building the bootable JAR using Apache Maven," width="640" height="717" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-build_bootable_jar_8.png 751w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-build_bootable_jar_8-268x300.png 268w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-851167" class="wp-caption-text"&gt;Figure 8: Build the bootable JAR.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once the bootable JAR is built, we need to run our application from CodeReady Studio. We will create a new Apache Maven run configuration for this purpose. As shown in Figure 9, right-click on the &lt;code&gt;pom.xml&lt;/code&gt; and navigate to the &lt;strong&gt;Run As&lt;/strong&gt; menu, then select &lt;strong&gt;5 Maven build&lt;/strong&gt;. Set &lt;strong&gt;org.wildfly.plugins:wildfly-jar-maven-plugin:run&lt;/strong&gt; as the goal and rename the execution to &lt;strong&gt;microprofile-config bootable run&lt;/strong&gt;, then click &lt;strong&gt;Run&lt;/strong&gt;.&lt;/p&gt; &lt;div id="attachment_851177" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-run_bootable_jar_9.png"&gt;&lt;img aria-describedby="caption-attachment-851177" class="wp-image-851177 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-run_bootable_jar_9-1024x801.png" alt="The dialog to run the bootable JAR using Apache Maven." width="640" height="501" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-run_bootable_jar_9-1024x801.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-run_bootable_jar_9-300x235.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-run_bootable_jar_9-768x601.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-run_bootable_jar_9.png 1389w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-851177" class="wp-caption-text"&gt;Figure 9: Run the bootable JAR.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;When the server starts, the application will be available as the root context, at &lt;a target="_blank" rel="nofollow" href="http://localhost:8080/config/value"&gt;http://localhost:8080/config/value&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Shutting down the server&lt;/h2&gt; &lt;p&gt;Closing or terminating the terminal will not stop the running server, so we need another run configuration to shut down the server. The easiest approach is to copy the run configuration we&amp;#8217;ve just created, rename it &lt;strong&gt;microprofile-config bootable shutdown&lt;/strong&gt;, and use the goal &lt;strong&gt;org.wildfly.plugins:wildfly-jar-maven-plugin:shutdown&lt;/strong&gt;, as shown in Figure 10.&lt;/p&gt; &lt;div id="attachment_851197" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-run_bootable_jar_10.png"&gt;&lt;img aria-describedby="caption-attachment-851197" class="wp-image-851197 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-run_bootable_jar_10-1024x801.png" alt="Create a new run configuration to shut down the server." width="640" height="501" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-run_bootable_jar_10-1024x801.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-run_bootable_jar_10-300x235.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-run_bootable_jar_10-768x601.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/crs-run_bootable_jar_10.png 1389w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-851197" class="wp-caption-text"&gt;Figure 10: Create a new run configuration to shut down the server.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This article showed you how to install JBoss Enterprise Application Platform XP 2.0.0 GA with Eclipse MicroProfile support. I then showed you two ways to configure and run a MicroProfile Config quickstart project using Red Hat CodeReady Studio.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F12%2Fdevelop-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-xp-2-0%2F&amp;#38;linkname=Develop%20Eclipse%20MicroProfile%20applications%20on%20Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%20XP%202.0" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F12%2Fdevelop-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-xp-2-0%2F&amp;#38;linkname=Develop%20Eclipse%20MicroProfile%20applications%20on%20Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%20XP%202.0" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F12%2Fdevelop-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-xp-2-0%2F&amp;#38;linkname=Develop%20Eclipse%20MicroProfile%20applications%20on%20Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%20XP%202.0" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F12%2Fdevelop-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-xp-2-0%2F&amp;#38;linkname=Develop%20Eclipse%20MicroProfile%20applications%20on%20Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%20XP%202.0" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F12%2Fdevelop-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-xp-2-0%2F&amp;#38;linkname=Develop%20Eclipse%20MicroProfile%20applications%20on%20Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%20XP%202.0" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F12%2Fdevelop-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-xp-2-0%2F&amp;#38;linkname=Develop%20Eclipse%20MicroProfile%20applications%20on%20Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%20XP%202.0" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F12%2Fdevelop-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-xp-2-0%2F&amp;#38;linkname=Develop%20Eclipse%20MicroProfile%20applications%20on%20Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%20XP%202.0" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F12%2Fdevelop-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-xp-2-0%2F&amp;#038;title=Develop%20Eclipse%20MicroProfile%20applications%20on%20Red%20Hat%20JBoss%20Enterprise%20Application%20Platform%20XP%202.0" data-a2a-url="https://developers.redhat.com/blog/2021/01/12/develop-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-xp-2-0/" data-a2a-title="Develop Eclipse MicroProfile applications on Red Hat JBoss Enterprise Application Platform XP 2.0"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/12/develop-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-xp-2-0/"&gt;Develop Eclipse MicroProfile applications on Red Hat JBoss Enterprise Application Platform XP 2.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/cmgVgrBpkwY" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;This article shows you how to install Red Hat JBoss Enterprise Application Platform (JBoss EAP) XP 2.0.0 GA with support for Eclipse MicroProfile. Once you&amp;#8217;ve enabled Eclipse MicroProfile, you will be able to use its quickstart examples to start developing your own MicroProfile applications with Red Hat CodeReady Studio. In this demonstration, you&amp;#8217;ll learn two [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/12/develop-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-xp-2-0/"&gt;Develop Eclipse MicroProfile applications on Red Hat JBoss Enterprise Application Platform XP 2.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/01/12/develop-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-xp-2-0/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">850617</post-id><dc:creator>Emmanuel Hugonnet</dc:creator><dc:date>2021-01-12T08:00:45Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/01/12/develop-eclipse-microprofile-applications-on-red-hat-jboss-enterprise-application-platform-xp-2-0/</feedburner:origLink></entry><entry><title type="html">Bored with magic tricks?</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/5Xd-KucGQfc/" /><author><name /></author><id>https://quarkus.io/blog/magic-control/</id><updated>2021-01-12T00:00:00Z</updated><content type="html">Just before my PTO, someone told me: 'I don’t like magic.' In this context, magic refers to the amount of hidden stuff done by Quarkus under the hood for the sake of simplicity. It includes dependency injection, annotations, and so on. It’s not the first time that I get that...&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/5Xd-KucGQfc" height="1" width="1" alt=""/&gt;</content><dc:creator /><feedburner:origLink>https://quarkus.io/blog/magic-control/</feedburner:origLink></entry><entry><title>Getting started with Buildah</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/C-oFmv-GD0U/" /><category term="Containers" /><category term="Kubernetes" /><category term="Linux" /><category term="buildah" /><category term="container image" /><category term="Docker" /><category term="openshift" /><category term="Podman" /><author><name>Cedric Clyburn</name></author><id>https://developers.redhat.com/blog/?p=758807</id><updated>2021-01-11T08:00:01Z</updated><published>2021-01-11T08:00:01Z</published><content type="html">&lt;p&gt;If you&amp;#8217;re looking to build Open Container Initiative (OCI) container images without a full container runtime or daemon installed, &lt;a target="_blank" rel="nofollow" href="https://buildah.io/"&gt;Buildah&lt;/a&gt; is the perfect solution. Now, Buildah is an open source, Linux-based tool that can build Docker- and &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;-compatible images, and is easy to incorporate into scripts and build pipelines. In addition, Buildah has overlap functionality with &lt;a target="_blank" rel="nofollow" href="https://podman.io/"&gt;Podman&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://github.com/containers/skopeo"&gt;Skopeo&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://cri-o.io/"&gt;CRI-O&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Buildah has the ability to create a working &lt;a href="https://developers.redhat.com/topics/containers/"&gt;container&lt;/a&gt; from scratch, but also from a pre-existing Dockerfile. Plus, with it not needing a daemon, you&amp;#8217;ll never have to worry about Docker daemon issues when building container images.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s cover some real-world examples to show how easy it is to get started with Buildah, and how easy it is to create a container image.&lt;/p&gt; &lt;h2&gt;Installing Buildah&lt;/h2&gt; &lt;p&gt;If you&amp;#8217;re running &lt;a href="https://developers.redhat.com/products/rhel/overview"&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL) 8, follow the steps below. For Fedora users, be sure to replace &lt;code&gt;yum&lt;/code&gt; with &lt;code&gt;dnf&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ yum -y install buildah&lt;/pre&gt; &lt;p&gt;However, if you don&amp;#8217;t have Linux available, you can use &lt;a target="_blank" rel="nofollow" href="https://www.katacoda.com/courses/containers-without-docker/building-container-images-with-buildah"&gt;Buildah online with Katacoda&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Basic commands&lt;/h2&gt; &lt;p&gt;To get to know Buildah, let&amp;#8217;s play around with some basic commands. The command &lt;code&gt;buildah --version&lt;/code&gt; will output the current version of our Buildah install, and &lt;code&gt;buildah --help&lt;/code&gt; will help if you get stuck.&lt;/p&gt; &lt;p&gt;For example, in order to pull a container image from a repository, use the &lt;code&gt;from&lt;/code&gt; variable. For example, if your favorite Linux distribution is CentOS:&lt;/p&gt; &lt;pre&gt;$ buildah from centos&lt;/pre&gt; &lt;p&gt;After pulling the image and storing it on the host, list our current images by running &lt;code&gt;buildah images&lt;/code&gt;. This behavior is similar to Podman and Docker, as many commands are cross-compatible. To get a list of our running containers, which are provisioned as soon as the image pull is completed, use &lt;code&gt;buildah containers&lt;/code&gt;. For an example, see Figure 1.&lt;/p&gt; &lt;div id="attachment_763307" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Buildah-containers.png"&gt;&lt;img aria-describedby="caption-attachment-763307" class="wp-image-763307 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Buildah-containers-1024x127.png" alt="The output of the command &amp;#34;buildah containers&amp;#34;, showing CONTAINER ID, BUILDER, IMAGE ID, IMAGE NAME, and CONTAINER #" width="640" height="79" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Buildah-containers-1024x127.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Buildah-containers-300x37.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Buildah-containers-768x95.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-763307" class="wp-caption-text"&gt;Figure 1: Run &amp;#8220;buildah containers&amp;#8221; to see your provisioned containers.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Finally, since we&amp;#8217;ve pulled and displayed a container, let&amp;#8217;s clean up and remove our running containers with &lt;code&gt;buildah rm -all&lt;/code&gt;. Be sure to exercise caution, however, as Buildah has the ability to remove a running container while Docker does not.&lt;/p&gt; &lt;h2&gt;Building a container&lt;/h2&gt; &lt;p&gt;Time to get hands-on with Buildah and build an Apache web server that will run inside a container. To get things started, let&amp;#8217;s pull a CentOS base image and start working:&lt;/p&gt; &lt;pre&gt;$ buildah from centos&lt;/pre&gt; &lt;p&gt;You&amp;#8217;ll see the default image name as output in the console like &lt;code&gt;centos-working-container&lt;/code&gt;, giving us the ability to run commands within the specified container. For our case, we&amp;#8217;ll be installing an &lt;a target="_blank" rel="nofollow" href="https://httpd.apache.org/docs/current/programs/httpd.html"&gt;httpd&lt;/a&gt; package, which can be done using the following command:&lt;/p&gt; &lt;pre&gt;$ buildah run centos-working-container yum install httpd -y&lt;/pre&gt; &lt;p&gt;Once we&amp;#8217;ve installed &lt;code&gt;httpd&lt;/code&gt;, we can take our attention to creating a main page to be directed to on our web server, commonly known as an &lt;code&gt;index.html&lt;/code&gt; file. To create a simple file without having to worry about formatting, use the &lt;code&gt;echo&lt;/code&gt; command below:&lt;/p&gt; &lt;pre&gt;$ echo "Hello from Red Hat" &amp;#62; index.html&lt;/pre&gt; &lt;p&gt;In addition, after creating this new file, let&amp;#8217;s copy it into our current working container with the Buildah &lt;code&gt;copy&lt;/code&gt; function. The default location for publicly accessible files is also included:&lt;/p&gt; &lt;pre&gt;$ buildah copy centos-working-container index.html /var/www/html/index.html&lt;/pre&gt; &lt;p&gt;To start this container, we must configure an entry point for a container, which is used to start &lt;code&gt;httpd&lt;/code&gt; as the container begins and keep it in the foreground:&lt;/p&gt; &lt;pre&gt;$ buildah config --entrypoint "/usr/sbin/httpd -DFOREGROUND" centos-working-container&lt;/pre&gt; &lt;p&gt;Finally, let&amp;#8217;s &lt;code&gt;commit&lt;/code&gt; our changes to the container, and prepare it to be pushed to any container registry you&amp;#8217;d like (ex. &lt;a href="https://developers.redhat.com/blog/2019/02/21/podman-and-buildah-for-docker-users/"&gt;Docker and Quay.io&lt;/a&gt;):&lt;/p&gt; &lt;pre&gt;$ buildah commit centos-working-container redhat-website&lt;/pre&gt; &lt;p&gt;Your &lt;code&gt;redhat-website&lt;/code&gt; image is ready to &lt;a href="https://developers.redhat.com/blog/2019/08/14/best-practices-for-running-buildah-in-a-container/"&gt;run with Podman&lt;/a&gt;, or push to your registry of choice.&lt;/p&gt; &lt;h2&gt;Building with a Dockerfile&lt;/h2&gt; &lt;p&gt;Another significant part of Buildah is the ability to build images using a Dockerfile, and the &lt;code&gt;build-using-dockerfile&lt;/code&gt;, or &lt;code&gt;bud&lt;/code&gt; command can do just that. Let&amp;#8217;s take an example Dockerfile as input, and output an OCI image:&lt;/p&gt; &lt;pre&gt;# &lt;strong&gt;CoreOS Base&lt;/strong&gt; FROM fedora:latest # &lt;strong&gt;Install httpd&lt;/strong&gt; RUN echo "Installing httpd"; yum -y install httpd # &lt;strong&gt;Expose the default httpd port 80&lt;/strong&gt; EXPOSE 80 # &lt;strong&gt;Run httpd&lt;/strong&gt; CMD ["/usr/sbin/httpd", "-DFOREGROUND"]&lt;/pre&gt; &lt;p&gt;Once we save this file as &lt;code&gt;Dockerfile&lt;/code&gt; in our local directory, we can use the &lt;code&gt;bud&lt;/code&gt; command to build the image:&lt;/p&gt; &lt;pre&gt;$ buildah bud -t fedora-httpd&lt;/pre&gt; &lt;p&gt;To double-check our progress, let&amp;#8217;s run &lt;code&gt;buildah images&lt;/code&gt; and ensure we can see our new &lt;code&gt;fedora-httpd&lt;/code&gt; image resting in our localhost repository. Now, feel free to again &lt;a href="https://developers.redhat.com/blog/2019/08/14/best-practices-for-running-buildah-in-a-container/"&gt;run the image with Podman&lt;/a&gt;, or push it to your favorite registry.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Great job! We&amp;#8217;ve gone through building a container from scratch, as well as from a predefined Dockerfile. Buildah is a lightweight and flexible way to create container images without the need for a runtime or daemon installed.&lt;/p&gt; &lt;p&gt;You can continue to experiment with Buildah by setting up &lt;a target="_blank" rel="nofollow" href="https://www.katacoda.com/courses/containers-without-docker/building-container-images-with-buildah"&gt;this Katacoda scenario&lt;/a&gt;, which offers you an interactive environment right in your browser.&lt;/p&gt; &lt;p&gt;If you need container orchestration, you can use Buildah with &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; or &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. To get started with these platforms, see &lt;a target="_blank" rel="nofollow" href="https://kubernetesbyexample.com/"&gt;kubernetesbyexample.com&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://learn.openshift.com/"&gt;learn.openshift.com.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;For interactive demonstrations of many of the examples you&amp;#8217;ve seen here, watch this video:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/SNDjOfs2zCM?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Resources&lt;/h2&gt; &lt;p&gt;Learn more about Buildah:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/02/21/podman-and-buildah-for-docker-users/"&gt;Podman and Buildah for Docker users&lt;/a&gt; (William Henry)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/08/14/best-practices-for-running-buildah-in-a-container/"&gt;Best practices for running Buildah in a container&lt;/a&gt; (Daniel Walsh)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/04/04/build-and-run-buildah-inside-a-podman-container/"&gt;Build and run Buildah inside a Podman container&lt;/a&gt; (Tom Sweeney)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F11%2Fgetting-started-with-buildah%2F&amp;#38;linkname=Getting%20started%20with%20Buildah" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F11%2Fgetting-started-with-buildah%2F&amp;#38;linkname=Getting%20started%20with%20Buildah" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F11%2Fgetting-started-with-buildah%2F&amp;#38;linkname=Getting%20started%20with%20Buildah" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F11%2Fgetting-started-with-buildah%2F&amp;#38;linkname=Getting%20started%20with%20Buildah" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F11%2Fgetting-started-with-buildah%2F&amp;#38;linkname=Getting%20started%20with%20Buildah" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F11%2Fgetting-started-with-buildah%2F&amp;#38;linkname=Getting%20started%20with%20Buildah" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F11%2Fgetting-started-with-buildah%2F&amp;#38;linkname=Getting%20started%20with%20Buildah" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F11%2Fgetting-started-with-buildah%2F&amp;#038;title=Getting%20started%20with%20Buildah" data-a2a-url="https://developers.redhat.com/blog/2021/01/11/getting-started-with-buildah/" data-a2a-title="Getting started with Buildah"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/11/getting-started-with-buildah/"&gt;Getting started with Buildah&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/C-oFmv-GD0U" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;If you&amp;#8217;re looking to build Open Container Initiative (OCI) container images without a full container runtime or daemon installed, Buildah is the perfect solution. Now, Buildah is an open source, Linux-based tool that can build Docker- and Kubernetes-compatible images, and is easy to incorporate into scripts and build pipelines. In addition, Buildah has overlap functionality [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/11/getting-started-with-buildah/"&gt;Getting started with Buildah&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/01/11/getting-started-with-buildah/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">758807</post-id><dc:creator>Cedric Clyburn</dc:creator><dc:date>2021-01-11T08:00:01Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/01/11/getting-started-with-buildah/</feedburner:origLink></entry><entry><title type="html">How to setup the OpenShift Container Platform 4.6 on your local machine</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/MQVlbKEcJuk/codeready-containers-howto-setup-openshift-46-on-local-machine.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/W5rqdLQSbvk/codeready-containers-howto-setup-openshift-46-on-local-machine.html</id><updated>2021-01-11T06:00:00Z</updated><content type="html">Are you looking to develop a few projects on your local machine and push them on to a real OpenShift Container Platform without having to worry about cloud hosting of your container platform? Would you like to do that on one of the newer versions of OpenShift Container Platform such as version 4.6? Look no further as CodeReady Containers puts it all at your fingertips. Experience the joys of cloud native development and automated rolling deployments.  The idea was to make this as streamlined of an experience as possible by using the same  project. Let's take a look at what this looks like. Below is a walk through step by step, putting the latest OpenShift Container Platform on your local developer machine. LINUX OR MAC INSTALLATION This installation requires the following (all freely available): &gt; 1. HyperKit for OSX, Hyper-V for Windows, or Libvirt for Linux &gt; 2. Code Ready Containers (OCP 4.6) &gt; 3. OpenShift Client (oc) v4.6 First you need to ensure your virtualization tooling is installed for your platform, just search online for how to do that or your specific platform. Second you need to download the CodeReady Containers. Finally, you need the OpenShift client. Normally you'd expect to have to track these last two down but we've made this all easy by just including checks during the installation. If you have something installed, it checks the version, if good then it moves on with next steps. If anything is missing or the wrong version, the installation stops and notifies you where to find that component for your platform (including URL). Let's get started by downloading the  project and unzipping in some directory. This gives you a file called ocp-install-demo-master.zip,just unzip and run the init.sh as follows:      $ ./init.sh  Follow the instructions as each of the dependencies is checked and you're provided with pointers to getting the versions you need for your platform. Note: Each CodeReady Container download is tied to an embedded secret. This secret you need to download (link will be provided) as a file and you'll be asked to point to that secret to start your container platform. Once you've gotten all the dependencies sorted out, the install runs like this: A little ASCII art and then it's checking for my platform's virtualization (Hyperkit), then looking for the OpenShift client version (oc client), then running a setup (crc setup). The next steps are providing the pull-secret-file, you can set this in the variables at the top of the installation script. Now the moment of truth, the CodeReady Containers cluster starts, which takes some time depending on your network (crc start). With a good network it's about a five minute wait. This is the logging you'll see as the OpenShift cluster starts on your local machine. The warning is normal, just some of the features have been trimmed to speed up deployment. At the end we'll retrieve the admin password for logging in to the cluster's console, pick up the host URL, test the deployment by logging in with our client (oc login), and finally you're given all the details in a nice box. You have the option to stop, start it again, or delete the OpenShift Container Platform cluster as shown in the dialog. Next open the web console using URL and login 'kubeadmin' with the corresponding password. In our case it's the URL: https://console-openshift-console.apps-crc.testing Login with user: kubeadmin Password in our case: duduw-yPT9Z-hsUpq-f3pre That opens the main dashboard: Verify the version you are running by clicking on the top right question mark and then About option: Close the version window by clicking on the X. As we are interested in developing using the tooling and container images provided by CodeReady Containers, let's change the view from Administrator to Developer in the left top menu selecting Topology and then via Project drop down menu at the top choose Default: You can browse the offerings in the provided container catalog by selecting From Catalog and then for example, Middleware to view the offerings available: Looking to get started with an example usage, try the  or examples that leverage the provided developer catalog container images. You can also explore how an existing project is set up using one of the developer catalog container images with a . This concludes the installation and tour of an OpenShift Container Platform on our local machine using CodeReady Containers. WHAT ABOUT WINDOWS? If you are a sharp observer, you'll notice there is a file called init.bat for windows platforms to install with. The problem is I've not been able to test this yet on a windows machine, so I'd love to call out to the readers out there that might have some time to contribute to test this script and help us complete the installation. You'll notice a few TODO's marked in the scripts code, as they are untested areas in the installation. You can  and help us complete the windows based installation and get your name added to the contributors list. We'd be really thankful! Stay tuned for more on cloud-native development using other Red Hat technologies on your new OpenShift Container Platform installed locally on your own machine!&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/MQVlbKEcJuk" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/W5rqdLQSbvk/codeready-containers-howto-setup-openshift-46-on-local-machine.html</feedburner:origLink></entry><entry><title>Message broker integration made simple with Red Hat Fuse</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/q9tJPZcfkZ8/" /><category term="Event-Driven" /><category term="Java" /><category term="Spring Boot" /><category term="apache camel" /><category term="jboss" /><category term="message broker" /><category term="red hat amq" /><category term="Red Hat Fuse" /><author><name>Francesco Marchioni</name></author><id>https://developers.redhat.com/blog/?p=807297</id><updated>2021-01-08T08:00:00Z</updated><published>2021-01-08T08:00:00Z</published><content type="html">&lt;p&gt;This article presents a sample integration between &lt;a href="https://developers.redhat.com/products/amq/overview"&gt;Red Hat AMQ 7&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://www.ibm.com/products/mq"&gt;IBM MQ&lt;/a&gt;, using &lt;a href="https://developers.redhat.com/products/fuse/download"&gt;Red Hat Fuse 7&lt;/a&gt; for the integration. Traditionally, developers have used resource adapters for message bridging with external systems. A &lt;i&gt;resource adapter&lt;/i&gt; is a system library that provides connectivity to an enterprise information system (EIS). Similar to how a Java Database Connectivity (JDBC) driver provides connectivity to a database management system, a resource adapter plugs into an application server such as &lt;a href="https://developers.redhat.com/products/eap/download"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt; (JBoss EAP). It then connects the application server, enterprise information system, and the enterprise application.&lt;/p&gt; &lt;p&gt;Resource adapters work well, but the configuration can be overwhelming, especially for scenarios that require adding numerous modules on top of the application server or where the resource adapter contract requires extensive administrative resources. Some scenarios require configuring multiple resource adapters and then arranging the message exchange between them.&lt;/p&gt; &lt;p&gt;Red Hat Fuse provides a simpler, more flexible pattern for routing messages between components. Fuse leverages Apache Camel&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/components/latest/jms-component.html"&gt;JMS component&lt;/a&gt; to exchange messages via a Java Message Service (JMS) queue or topic. It relies on Spring’s JMS support for declarative transactions.&lt;/p&gt; &lt;p&gt;Follow the demonstration in the next sections to see for yourself how the JMS component works in a Red Hat Fuse integration.&lt;/p&gt; &lt;h2&gt;Set up the Red Hat Fuse project&lt;/h2&gt; &lt;p&gt;For this demonstration, we will create a &lt;a href="https://developers.redhat.com/topics/spring-boot"&gt;Spring Boot&lt;/a&gt;-based Fuse application that uses a Camel route to exchange messages between Red Hat AMQ and IBM MQ. To start, open a shell prompt and enter the following &lt;code&gt;mvn&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;mvn org.apache.maven.plugins:maven-archetype-plugin:2.4:generate \ -DarchetypeCatalog=https://maven.repository.redhat.com/ga/io/fabric8/archetypes/archetypes-catalog/2.2.0.fuse-760024-redhat-00001/archetypes-catalog-2.2.0.fuse-760024-redhat-00001-archetype-catalog.xml \ -DarchetypeGroupId=org.jboss.fuse.fis.archetypes \ -DarchetypeArtifactId=spring-boot-camel-xml-archetype \ -DarchetypeVersion=2.2.0.fuse-760024-redhat-00001 &lt;/pre&gt; &lt;p&gt;This command creates the basic project structure, including the &lt;code&gt;Application&lt;/code&gt; class:&lt;/p&gt; &lt;pre&gt;package com.sample; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } } &lt;/pre&gt; &lt;p&gt;So far, the code should look familiar.&lt;/p&gt; &lt;h2&gt;Configure the brokers&lt;/h2&gt; &lt;p&gt;Next, we&amp;#8217;ll configure the two brokers. Start by adding a &lt;code&gt;@Configuration&lt;/code&gt; bean that contains the following &lt;code&gt;JmsComponent&lt;/code&gt; bean declarations (note that the declarations are bound as &lt;code&gt;@Bean&lt;/code&gt; using the method name for the &lt;code&gt;id&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;package com.sample; import com.ibm.mq.jms.*; import org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory; import org.apache.camel.component.jms.JmsComponent; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter; @Configuration public class AppConfig { @Bean public JmsComponent activemq() throws Exception { // Create the connectionfactory which will be used to connect to Artemis ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(); cf.setBrokerURL("tcp://localhost:61616"); cf.setUser("admin"); cf.setPassword("admin"); // Create the Camel JMS component and wire it to our Artemis connectionfactory JmsComponent jms = new JmsComponent(); jms.setConnectionFactory(cf); return jms; } @Bean public JmsComponent wmq(){ JmsComponent jmsComponent = new JmsComponent(); jmsComponent.setConnectionFactory(mqQueueConnectionFactory()); return jmsComponent; } @Bean public MQQueueConnectionFactory mqQueueConnectionFactory() { // Create the connectionfactory which will be used to connect to IBM MQ MQQueueConnectionFactory mqQueueConnectionFactory = new MQQueueConnectionFactory(); mqQueueConnectionFactory.setHostName("localhost"); try { mqQueueConnectionFactory.setTransportType(1); mqQueueConnectionFactory.setChannel("DEV.APP.SVRCONN"); mqQueueConnectionFactory.setPort(1414); mqQueueConnectionFactory.setQueueManager("QM1"); } catch (Exception e) { e.printStackTrace(); } return mqQueueConnectionFactory; } @Bean public UserCredentialsConnectionFactoryAdapter userCredentialsConnectionFactoryAdapter( MQQueueConnectionFactory mqQueueConnectionFactory) { UserCredentialsConnectionFactoryAdapter userCredentialsConnectionFactoryAdapter = new UserCredentialsConnectionFactoryAdapter(); userCredentialsConnectionFactoryAdapter.setUsername("username"); userCredentialsConnectionFactoryAdapter.setPassword("password"); userCredentialsConnectionFactoryAdapter.setTargetConnectionFactory(mqQueueConnectionFactory); return userCredentialsConnectionFactoryAdapter; } } &lt;/pre&gt; &lt;p&gt;The Red Hat AMQ connection factory is now available under the &lt;code&gt;activemq&lt;/code&gt; &lt;code&gt;id&lt;/code&gt;. The IBM MQ connection factory is available under the &lt;code&gt;wmq&lt;/code&gt; &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Add the route definition&lt;/h2&gt; &lt;p&gt;We&amp;#8217;re almost done. Our final step is to add the &lt;code&gt;RouteBuilder&lt;/code&gt; class, which contains the route definition:&lt;/p&gt; &lt;pre&gt;package com.sample; import org.apache.camel.builder.RouteBuilder; import org.springframework.stereotype.Component; @Component public class CamelArtemisRouteBuilder extends RouteBuilder { public void configure() throws Exception { from("timer:mytimer?period=5000").routeId("generate-route") .transform(constant("HELLO from Camel!")) .to("activemq:queue:QueueIN"); from("activemq:queue:QueueIN").routeId("receive-route") .log("Received a message - ${body} - sending to outbound queue") .to("wmq:queue:DEV.QUEUE.1?exchangePattern=InOnly"); } } &lt;/pre&gt; &lt;p&gt;In the above route, messages are produced from a timer component that fires new messages every five seconds. Messages are sent through the Red Hat AMQ queue named &lt;code&gt;QueueIN&lt;/code&gt;. After logging the message body, they are sent to the sink destination, which is &lt;code&gt;DEV.QUEUE.1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;We&amp;#8217;ve completed the integration setup. Next, we&amp;#8217;ll run the application and verify that it&amp;#8217;s working.&lt;/p&gt; &lt;h2&gt;Start the brokers and run the application&lt;/h2&gt; &lt;p&gt;Before running the application, we need to start the two broker instances. Make sure your Red Hat AMQ server is up and running. If it is not already running, enter the following command:&lt;/p&gt; &lt;pre&gt;./artemis run &lt;/pre&gt; &lt;p&gt;Next, start IBM MQ. For this purpose, you can use a container image of IBM MQ with the developer license:&lt;/p&gt; &lt;pre&gt;$ podman run --env LICENSE=accept --env MQ_QMGR_NAME=QM1 --publish 1414:1414 --publish 9443:9443 --detach ibmcom/mq &lt;/pre&gt; &lt;p&gt;Finally, use the standard Spring Boot Maven plug-in to start the Red Hat Fuse application:&lt;/p&gt; &lt;pre&gt;$ mvn spring-boot:run &lt;/pre&gt; &lt;h2&gt;Verify the application&lt;/h2&gt; &lt;p&gt;As the application starts, you will see from the Spring Boot console that messages are logged on the console:&lt;/p&gt; &lt;pre&gt;12:10:12.552 [Camel (camel-1) thread #1 - JmsConsumer[INCOMING]] INFO receive-route - Received a message - HELLO from Camel! - sending to outbound queue 13:20:37.935 [Camel (camel-1) thread #1 - JmsConsumer[INCOMING]] INFO receive-route - Received a message - HELLO from Camel! - sending to outbound queue 13:20:42.954 [Camel (camel-1) thread #1 - JmsConsumer[INCOMING]] INFO receive-route - Received a message - HELLO from Camel! - sending to outbound queue 13:20:47.966 [Camel (camel-1) thread #1 - JmsConsumer[INCOMING]] INFO receive-route - Received a message - HELLO from Camel! - sending to outbound queue &lt;/pre&gt; &lt;p&gt;You can log into the running container process to check that the message has been received on the IBM MQ side:&lt;/p&gt; &lt;pre&gt;$ podman ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 52f0f72d56ed docker.io/ibmcom/mq:latest 5 hours ago Up 5 hours ago 0.0.0.0:1414-&amp;#62;1414/tcp pensive_bose&lt;/pre&gt; &lt;p&gt;The output shows the message has been received:&lt;/p&gt; &lt;pre&gt;$ podman exec --tty --interactive 52f0f72d56ed bash bash-4.4$ /opt/mqm/samp/bin/amqsbcg DEV.QUEUE.1 QM1 MQGET of message number 1 ****Message descriptor**** StrucId : 'MD ' Version : 2 Report : 0 MsgType : 8 Expiry : -1 Feedback : 0 Encoding : 546 CodedCharSetId : 850 Format : 'MQEVENT ' Priority : 0 Persistence : 0 MsgId : X'414D512073617475726E2E71756575650005D30033563DB8' CorrelId : X'000000000000000000000000000000000000000000000000' BackoutCount : 0 ReplyToQ : ' ' ** Identity Context UserIdentifier : ' ' AccountingToken : X'0000000000000000000000000000000000000000000000000000000000000000' ApplIdentityData : ' ' ** Origin Context PutApplType : '7' PutDate : '19970417' PutTime : '15115208' ApplOriginData : ' ' GroupId : X'000000000000000000000000000000000000000000000000' MsgSeqNumber : '1' Offset : '0' MsgFlags : '0' OriginalLength : '104' **** Message **** length - 104 bytes &lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This article discussed how to connect multiple JMS providers (in this case, Red Hat AMQ and IBM MQ) by registering their JMS &lt;code&gt;ConnectionFactory&lt;/code&gt; components as Spring beans. After registering the &lt;code&gt;ConnectionFactory&lt;/code&gt; beans, we injected them into a Camel JMS component configuration. We then defined the Camel JMS component and used it as part of a Camel route to move messages from both ends of the application.&lt;/p&gt; &lt;p&gt;To get started with Red Hat Fuse, &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?product=jboss.fuse&amp;#38;downloadType=distributions"&gt;visit the Red Hat Fuse download page&lt;/a&gt;. To learn more about using Red Hat Fuse for message broker integration, see &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/solutions/1173833"&gt;Integrate IBM WebSphere MQ with JBoss Fuse&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;About the author&lt;/h2&gt; &lt;p&gt;Francesco Marchioni is a senior technical account manager for Red Hat Middleware products based in Rome, Italy. Read more about open source contributions to the JBoss developer community at &lt;a target="_blank" rel="nofollow" href="http://www.mastertheboss.com"&gt;mastertheboss.com&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F08%2Fmessage-broker-integration-made-simple-with-red-hat-fuse%2F&amp;#38;linkname=Message%20broker%20integration%20made%20simple%20with%20Red%20Hat%20Fuse" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F08%2Fmessage-broker-integration-made-simple-with-red-hat-fuse%2F&amp;#38;linkname=Message%20broker%20integration%20made%20simple%20with%20Red%20Hat%20Fuse" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F08%2Fmessage-broker-integration-made-simple-with-red-hat-fuse%2F&amp;#38;linkname=Message%20broker%20integration%20made%20simple%20with%20Red%20Hat%20Fuse" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F08%2Fmessage-broker-integration-made-simple-with-red-hat-fuse%2F&amp;#38;linkname=Message%20broker%20integration%20made%20simple%20with%20Red%20Hat%20Fuse" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F08%2Fmessage-broker-integration-made-simple-with-red-hat-fuse%2F&amp;#38;linkname=Message%20broker%20integration%20made%20simple%20with%20Red%20Hat%20Fuse" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F08%2Fmessage-broker-integration-made-simple-with-red-hat-fuse%2F&amp;#38;linkname=Message%20broker%20integration%20made%20simple%20with%20Red%20Hat%20Fuse" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F08%2Fmessage-broker-integration-made-simple-with-red-hat-fuse%2F&amp;#38;linkname=Message%20broker%20integration%20made%20simple%20with%20Red%20Hat%20Fuse" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F08%2Fmessage-broker-integration-made-simple-with-red-hat-fuse%2F&amp;#038;title=Message%20broker%20integration%20made%20simple%20with%20Red%20Hat%20Fuse" data-a2a-url="https://developers.redhat.com/blog/2021/01/08/message-broker-integration-made-simple-with-red-hat-fuse/" data-a2a-title="Message broker integration made simple with Red Hat Fuse"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/08/message-broker-integration-made-simple-with-red-hat-fuse/"&gt;Message broker integration made simple with Red Hat Fuse&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/q9tJPZcfkZ8" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;This article presents a sample integration between Red Hat AMQ 7 and IBM MQ, using Red Hat Fuse 7 for the integration. Traditionally, developers have used resource adapters for message bridging with external systems. A resource adapter is a system library that provides connectivity to an enterprise information system (EIS). Similar to how a Java [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/08/message-broker-integration-made-simple-with-red-hat-fuse/"&gt;Message broker integration made simple with Red Hat Fuse&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/01/08/message-broker-integration-made-simple-with-red-hat-fuse/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">807297</post-id><dc:creator>Francesco Marchioni</dc:creator><dc:date>2021-01-08T08:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/01/08/message-broker-integration-made-simple-with-red-hat-fuse/</feedburner:origLink></entry><entry><title>Debuginfo is not just for debugging programs</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/UHgw-X9Dhdc/" /><category term="Linux" /><category term="Performance" /><category term="ABI check" /><category term="debuginfo" /><category term="Fedora" /><category term="performance monitoring" /><category term="RHEL" /><author><name>William Cohen</name></author><id>https://developers.redhat.com/blog/?p=783277</id><updated>2021-01-07T08:00:45Z</updated><published>2021-01-07T08:00:45Z</published><content type="html">&lt;p&gt;For a long time at Red Hat, all executables in RPMs were built with debuginfo enabled. While this practice makes it easier for people in support to investigate issues reported using tools such as GDB and crash, there are other important non-debugging uses for the resulting debuginfo.&lt;/p&gt; &lt;p&gt;Debuginfo was named for its initial use. Over time, other applications (such as application binary interface [ABI] compliance checking, data struct layout analysis, and performance monitoring) that use the same information needed for debugging have been developed. It is best to think of the debuginfo as mapping information between the executable that compilers generate and the source code that developers write. It helps humans get crucial information to better understand the executable code actually running their systems, and provides a means of double-checking the compiler&amp;#8217;s and the developers&amp;#8217; work.&lt;/p&gt; &lt;h2&gt;Application binary interface (ABI) checking&lt;/h2&gt; &lt;p&gt;Currently, on Linux, very few applications are monolithic stand-alone binaries. Most binaries make extensive use of shared libraries to leverage the work of other projects and reduce the size of executables. However, for this practice to work, the application binary interfaces (ABIs) provided by the libraries need to be stable. It would be horrible if a Linux distribution updated a shared library used by an application and suddenly the application stopped working as a result. Tools such as &lt;a target="_blank" rel="nofollow" href="https://sourceware.org/libabigail/"&gt;libabigail&lt;/a&gt; compare different versions of a shared library to detect any changes in the ABI.&lt;/p&gt; &lt;p&gt;These ABI checking tools use the debuginfo to determine which functions are available, the functions&amp;#8217; return types, the arguments being passed into the functions, and the data layout of those various types. The debuginfo is a machine-readable mechanism to verify that the ABI has not changed. Without the debuginfo, these checks would not be feasible.&lt;/p&gt; &lt;p&gt;For distributions such as &lt;a href="https://developers.redhat.com/topics/linux"&gt;Red Hat Enterprise Linux&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://getfedora.org/"&gt;Fedora&lt;/a&gt;, these &lt;a href="https://developers.redhat.com/blog/2017/02/28/abi-change-analysis-of-fedora-packages/"&gt;ABI checks&lt;/a&gt; are essential. ABI checks are done comparing the newer candidate build of packages to previous builds to ensure ABI compatibility. This ensures that other software that relies on those packages will continue to function.&lt;/p&gt; &lt;h2&gt;Data structure layout analysis&lt;/h2&gt; &lt;p&gt;The compiler might insert padding in data structures to ensure that the data structures do not violate the alignment constraints of the target computer architecture. This padding wastes memory. When developers create data structures, they might not be aware of the alignment constraints. Also, there might be different alignment constraints used for certain compiler options and other target processors.&lt;/p&gt; &lt;p&gt;Tools such as pahole in the dwarves package reads the debuginfo describing the data structures and determines where padding has been added. Even on machines with gigabytes of RAM, there can be a great desire to &lt;a href="https://developers.redhat.com/blog/2016/06/01/how-to-avoid-wasting-megabytes-of-memory-a-few-bytes-at-a-time/"&gt;more efficiently organize the data structures to avoid wasting space&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Performance monitoring&lt;/h2&gt; &lt;p&gt;One might want to provide feedback on a program&amp;#8217;s operation in production. This information can provide a baseline of how the program normally operates. It can also provide insights into which areas of the program consume too much time and could be made more efficient. Periodic sampling of the program counter by &lt;a target="_blank" rel="nofollow" href="https://fedoramagazine.org/performance-profiling-perf/"&gt;perf&lt;/a&gt; is a common way of estimating the time spent in various areas of program. However, just having raw samples of program addresses and bytes from the program stack is not useful for developers. Developers want stack backtraces so they can produce &lt;a target="_blank" rel="nofollow" href="http://www.brendangregg.com/flamegraphs.html"&gt;flame graphs&lt;/a&gt; and be able to determine which areas of the source code they need to revise to improve performance of future versions of the software.&lt;/p&gt; &lt;h2&gt;Keep the debuginfo information handy&lt;/h2&gt; &lt;p&gt;These non-debugging uses of the debuginfo can help improve code quality by catching unexpected changes in ABI, unexpected wasted space in data structures, and unexpected inefficient sections of code. The debuginfo does take up space, but there are methods to strip that information from binaries and place it elsewhere so the default binaries are not any larger than binaries compiled without the debuginfo. Thus, it is best to default to compiling code with debuginfo enabled.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F07%2Fdebuginfo-is-not-just-for-debugging-programs%2F&amp;#38;linkname=Debuginfo%20is%20not%20just%20for%20debugging%20programs" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F07%2Fdebuginfo-is-not-just-for-debugging-programs%2F&amp;#38;linkname=Debuginfo%20is%20not%20just%20for%20debugging%20programs" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F07%2Fdebuginfo-is-not-just-for-debugging-programs%2F&amp;#38;linkname=Debuginfo%20is%20not%20just%20for%20debugging%20programs" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F07%2Fdebuginfo-is-not-just-for-debugging-programs%2F&amp;#38;linkname=Debuginfo%20is%20not%20just%20for%20debugging%20programs" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F07%2Fdebuginfo-is-not-just-for-debugging-programs%2F&amp;#38;linkname=Debuginfo%20is%20not%20just%20for%20debugging%20programs" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F07%2Fdebuginfo-is-not-just-for-debugging-programs%2F&amp;#38;linkname=Debuginfo%20is%20not%20just%20for%20debugging%20programs" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F07%2Fdebuginfo-is-not-just-for-debugging-programs%2F&amp;#38;linkname=Debuginfo%20is%20not%20just%20for%20debugging%20programs" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F07%2Fdebuginfo-is-not-just-for-debugging-programs%2F&amp;#038;title=Debuginfo%20is%20not%20just%20for%20debugging%20programs" data-a2a-url="https://developers.redhat.com/blog/2021/01/07/debuginfo-is-not-just-for-debugging-programs/" data-a2a-title="Debuginfo is not just for debugging programs"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/07/debuginfo-is-not-just-for-debugging-programs/"&gt;Debuginfo is not just for debugging programs&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/UHgw-X9Dhdc" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;For a long time at Red Hat, all executables in RPMs were built with debuginfo enabled. While this practice makes it easier for people in support to investigate issues reported using tools such as GDB and crash, there are other important non-debugging uses for the resulting debuginfo. Debuginfo was named for its initial use. Over [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/07/debuginfo-is-not-just-for-debugging-programs/"&gt;Debuginfo is not just for debugging programs&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/01/07/debuginfo-is-not-just-for-debugging-programs/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">783277</post-id><dc:creator>William Cohen</dc:creator><dc:date>2021-01-07T08:00:45Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/01/07/debuginfo-is-not-just-for-debugging-programs/</feedburner:origLink></entry><entry><title type="html">Teiid Spring Boot 1.7.0 Released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/pyzxhYn6Wwg/teiid-spring-boot-170-released.html" /><author><name>Ramesh</name></author><id>http://teiid.blogspot.com/2021/01/teiid-spring-boot-170-released.html</id><updated>2021-01-06T15:24:00Z</updated><content type="html">Teiid Spring Boot version 1.7.0 to support Teiid 16.0 has been released. This release is mainly to support the Teiid's latest version.  In this release, the support for OpenAPI code generation based on VDB has been removed as there is no community interest and moreover it was at OpenAPI 2.0, and the industry has moved to 3.0 and beyond. There are no plans to further pursue this feature. VDB maven plugin was also removed, which was intended to be a replacement for the VDB importing feature was to be used when working on OpenShift, however, since it requires the Maven repository and does not completely represent the feature as defined on the WildFly based deployments this is also removed. You can still use the VDB import feature with Teiid Spring Boot, simply define the VDB with your "IMPORT DATABASE" statements and provide the additional files along with the main VDB file. During the start of the application, Teiid Spring Boot will load all the necessary DDL files for the VDB. The Spring Boot version is upgraded to 2.3.4.RELEASE Ramesh..&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/pyzxhYn6Wwg" height="1" width="1" alt=""/&gt;</content><dc:creator>Ramesh</dc:creator><feedburner:origLink>http://teiid.blogspot.com/2021/01/teiid-spring-boot-170-released.html</feedburner:origLink></entry><entry><title>How to enable HTTPS and SSL termination in a Quarkus app</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/rzVRILbFmLI/" /><category term="DevOps" /><category term="Java" /><category term="Quarkus" /><category term="Security" /><category term="cert.pem" /><category term="kubernetes secret" /><category term="openshift" /><category term="Red Hat OpenShift" /><category term="ssl termination" /><author><name>Carles Arnal</name></author><id>https://developers.redhat.com/blog/?p=808637</id><updated>2021-01-06T08:00:35Z</updated><published>2021-01-06T08:00:35Z</published><content type="html">&lt;p&gt;When it comes to the &lt;a href="https://developers.redhat.com/topics/containers/"&gt;container&lt;/a&gt; world, it is common to have an application deployed to a cluster that needs to be secured. In this article, I will show you how to enable HTTPS and SSL termination for a &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt; application that is running in &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/"&gt;Red Hat OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Create the secret&lt;/h2&gt; &lt;p&gt;First, we will need a paired key and certificate. If you do not have any available, you can use the following command to create a development-only key and certificate:&lt;/p&gt; &lt;pre&gt;~ openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem&lt;/pre&gt; &lt;p&gt;This will create two files (key.pem and cert.pem) that we need to inject into our pods to make them available to the Quarkus application. This can easily be achieved using secrets and volumes by following these steps:&lt;/p&gt; &lt;ol&gt; &lt;li style="list-style-type: none;"&gt; &lt;ol&gt; &lt;li&gt;Create a key/value secret in the Create Key/Value Secret dialog box.&lt;/li&gt; &lt;li&gt;Add two keys, one for the file cert.pem and one for the key.pem, as shown in Figure 1.&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_810247" style="width: 505px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/create-secret.png"&gt;&lt;img aria-describedby="caption-attachment-810247" class="wp-image-810247" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/create-secret.png" alt="Create Key/Value Secret dialog box filled in with Secret Name https-secret and Key/Value entries for cert.pem and key.pem" width="495" height="458" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/create-secret.png 839w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/create-secret-300x278.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/create-secret-768x711.png 768w" sizes="(max-width: 495px) 100vw, 495px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-810247" class="wp-caption-text"&gt;Figure 1: First, create your key/value secret in OpenShift.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once created, add the secret to the application&amp;#8217;s workload as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_810237" style="width: 445px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/add-secret.png"&gt;&lt;img aria-describedby="caption-attachment-810237" class="wp-image-810237" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/add-secret.png" alt="Add Secret to Workload dialog box with example secret selected, and Add secret as set to Volume with example path selected" width="435" height="362" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/add-secret.png 536w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/add-secret-300x250.png 300w" sizes="(max-width: 435px) 100vw, 435px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-810237" class="wp-caption-text"&gt;Figure 2: Second, add the secret to your workload.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We now add it as a volume with a mount path of our choice. This will mount and add both the cert and the key files to all application pods.&lt;/p&gt; &lt;h2&gt;Enable HTTPS&lt;/h2&gt; &lt;p&gt;Once the secret has been added to the workload, we&amp;#8217;ll need to set up some environment variables in order to enable HTTPS and for Quarkus to expose the proper port. The most important parts of the configuration are the environment variables referring to the SSL certificate. For more information about options available when configuring SSL in Quarkus see &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/http-reference#ssl"&gt;this section of the Quarkus HTTP Reference Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Figure 3 shows an example of the resulting configuration.&lt;/p&gt; &lt;div id="attachment_809597" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/environment-variables.png"&gt;&lt;img aria-describedby="caption-attachment-809597" class="wp-image-809597 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/environment-variables-1024x245.png" alt="SSL certificate-related environment variables, see the description for the variables and their values." width="640" height="153" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/environment-variables-1024x245.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/environment-variables-300x72.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/environment-variables-768x184.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/environment-variables.png 1443w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-809597" class="wp-caption-text"&gt;Figure 3: Third, set up your environment variables, especially for your SSL certificate.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;With this configuration, we&amp;#8217;re redirecting all of the insecure requests, and we’re telling Quarkus to use the key and the certificate (that we have mounted in the previous step) into the pods.&lt;/p&gt; &lt;p&gt;Now our Quarkus application should be exposing port 8443 for HTTPS. If we go to the application logs, we should see a message like the following:&lt;/p&gt; &lt;div id="attachment_809627" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/quarkus-log.png"&gt;&lt;img aria-describedby="caption-attachment-809627" class="wp-image-809627 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/quarkus-log-1024x167.png" alt="The application log with the example application's launch record highlighted, which shows what ports it's listening on." width="640" height="104" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/quarkus-log-1024x167.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/quarkus-log-300x49.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/quarkus-log-768x125.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/quarkus-log.png 1473w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-809627" class="wp-caption-text"&gt;Figure 4: And finally, make sure that your Quarkus application is exposing port 8443 for HTTPS.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Exposing the app to the real world&lt;/h2&gt; &lt;p&gt;Great, the Quarkus application is now exposing the proper port and accepting connections through HTTPS. At this point, we can consider the Quarkus work done. However, if we don&amp;#8217;t expose our app to the external world, this is useless.&lt;/p&gt; &lt;p&gt;In order to make our app available externally, we are going to need a &lt;em&gt;service&lt;/em&gt; and a &lt;em&gt;route&lt;/em&gt;. A service serves as an internal load balancer. It identifies a set of replicated pods in order to proxy the connections it receives to them. Services are assigned an IP address and port that, when accessed, proxy to an appropriate backing pod.&lt;/p&gt; &lt;p&gt;A service uses a label selector to find all of the running containers that provide a certain network service on a certain port. Here&amp;#8217;s a service example:&lt;/p&gt; &lt;pre&gt;apiVersion: v1 kind: Service metadata: generateName: test-ssl-apicurioregistry-service- namespace: default spec: selector: app: test-ssl-apicurioregistry ports: - protocol: TCP port: 8443 targetPort: 8443 &lt;/pre&gt; &lt;p&gt;An OpenShift route is a way to expose a service by giving it an externally-reachable host name. For more information on how to create or manage secured routes, see &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.6/networking/routes/secured-routes.html"&gt;the Secured Routes section of the OpenShift documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s a secured route example:&lt;/p&gt; &lt;pre&gt;apiVersion: v1 kind: Route metadata: name: secured-registry namespace: default spec: to: kind: Service name: test-ssl-apicurioregistry-service-mjdzd weight: 100 port: targetPort: 8443 tls: termination: passthrough insecureEdgeTerminationPolicy: Redirect wildcardPolicy: None &lt;/pre&gt; &lt;h2&gt;Check the configuration&lt;/h2&gt; &lt;p&gt;We can easily check our configuration using the OpenShift client:&lt;/p&gt; &lt;pre&gt;➜ ~ oc get routes NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD secured-registry secured-registry-default.apps.carnalca.ipt.integrations.rhmw.io test-ssl-apicurioregistry-service-mjdzd 8443 passthrough/Redirect None &lt;/pre&gt; &lt;pre&gt;➜ ~ oc get svc test-ssl-apicurioregistry-service-mjdzd NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE test-ssl-apicurioregistry-service-mjdzd ClusterIP 172.30.122.25 8443/TCP 21h &lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, I showed you how to secure the traffic of a &lt;a href="https://developers.redhat.com/topics/quarkus/"&gt;Quarkus&lt;/a&gt; application. From the Quarkus properties to the OpenShift resources, you have seen the simplest way to achieve this goal. While I&amp;#8217;ve used some defaults, there are many other features and configurations to explore. Here I am just covering the basics on how to secure a Quarkus application in OpenShift while keeping everything as simple as possible. I hope sharing this experience will be helpful to others.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F06%2Fhow-to-enable-https-and-ssl-termination-in-a-quarkus-app%2F&amp;#38;linkname=How%20to%20enable%20HTTPS%20and%20SSL%20termination%20in%20a%20Quarkus%20app" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F06%2Fhow-to-enable-https-and-ssl-termination-in-a-quarkus-app%2F&amp;#38;linkname=How%20to%20enable%20HTTPS%20and%20SSL%20termination%20in%20a%20Quarkus%20app" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F06%2Fhow-to-enable-https-and-ssl-termination-in-a-quarkus-app%2F&amp;#38;linkname=How%20to%20enable%20HTTPS%20and%20SSL%20termination%20in%20a%20Quarkus%20app" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F06%2Fhow-to-enable-https-and-ssl-termination-in-a-quarkus-app%2F&amp;#38;linkname=How%20to%20enable%20HTTPS%20and%20SSL%20termination%20in%20a%20Quarkus%20app" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F06%2Fhow-to-enable-https-and-ssl-termination-in-a-quarkus-app%2F&amp;#38;linkname=How%20to%20enable%20HTTPS%20and%20SSL%20termination%20in%20a%20Quarkus%20app" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F06%2Fhow-to-enable-https-and-ssl-termination-in-a-quarkus-app%2F&amp;#38;linkname=How%20to%20enable%20HTTPS%20and%20SSL%20termination%20in%20a%20Quarkus%20app" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F06%2Fhow-to-enable-https-and-ssl-termination-in-a-quarkus-app%2F&amp;#38;linkname=How%20to%20enable%20HTTPS%20and%20SSL%20termination%20in%20a%20Quarkus%20app" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F06%2Fhow-to-enable-https-and-ssl-termination-in-a-quarkus-app%2F&amp;#038;title=How%20to%20enable%20HTTPS%20and%20SSL%20termination%20in%20a%20Quarkus%20app" data-a2a-url="https://developers.redhat.com/blog/2021/01/06/how-to-enable-https-and-ssl-termination-in-a-quarkus-app/" data-a2a-title="How to enable HTTPS and SSL termination in a Quarkus app"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/06/how-to-enable-https-and-ssl-termination-in-a-quarkus-app/"&gt;How to enable HTTPS and SSL termination in a Quarkus app&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/rzVRILbFmLI" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;When it comes to the container world, it is common to have an application deployed to a cluster that needs to be secured. In this article, I will show you how to enable HTTPS and SSL termination for a Quarkus application that is running in Red Hat OpenShift. Create the secret First, we will need [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/06/how-to-enable-https-and-ssl-termination-in-a-quarkus-app/"&gt;How to enable HTTPS and SSL termination in a Quarkus app&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/01/06/how-to-enable-https-and-ssl-termination-in-a-quarkus-app/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">808637</post-id><dc:creator>Carles Arnal</dc:creator><dc:date>2021-01-06T08:00:35Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/01/06/how-to-enable-https-and-ssl-termination-in-a-quarkus-app/</feedburner:origLink></entry><entry><title>Building Red Hat Enterprise Linux 9 for the x86-64-v2 microarchitecture level</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/KcfJ7prYKfg/" /><category term="C" /><category term="C#" /><category term="C++" /><category term="Linux" /><category term="Open source" /><category term="AVX2" /><category term="gcc" /><category term="glibc" /><category term="microarchitecture" /><category term="RHEL 9" /><category term="valgrind" /><category term="x86-64" /><author><name>Florian Weimer</name></author><id>https://developers.redhat.com/blog/?p=839567</id><updated>2021-01-05T08:00:09Z</updated><published>2021-01-05T08:00:09Z</published><content type="html">&lt;p&gt;One of the most important early decisions when building a Linux distribution is the scope of supported hardware. The distribution&amp;#8217;s default compiler flags are significant for hardware-platform compatibility. Programs that use newer CPU instructions might not run on older CPUs. In this article, I discuss a new approach to building the x86-64 variant of &lt;a href="https://developers.redhat.com/topics/linux"&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL) 9 and share Red Hat&amp;#8217;s recommendation for that build.&lt;/p&gt; &lt;h2&gt;Background of the x86-64 microarchitecture levels&lt;/h2&gt; &lt;p&gt;The GNU C Library (glibc) offers a way to load optimized libraries that use additional hardware features that might not be present on all systems. Originally, this mechanism was designed to support perhaps one or two alternative library implementations, in addition to the default (fallback) implementation that is usually installed in the &lt;code&gt;/usr/lib64&lt;/code&gt; directory. However, the power-set construction involved in the library lookup mechanism &lt;a target="_blank" rel="nofollow" href="https://sourceware.org/pipermail/libc-alpha/2020-May/113757.html"&gt;poorly matches current platforms with a long list of optional CPU features&lt;/a&gt;. We see this especially on the x86 architecture, where many optional features have been added over the years (see the &lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/CPUID"&gt;Wikipedia article for the CPUID instruction&lt;/a&gt; for a list). The plethora of choices poses a problem not only for the dynamic linker but also for programmers. Until recently, there has been little guidance on what CPU features to assume in optimized libraries. &lt;a target="_blank" rel="nofollow" href="https://sourceware.org/bugzilla/show_bug.cgi?id=24080"&gt;GCC and glibc disagree on the definition of feature sets&lt;/a&gt;, and the &lt;a target="_blank" rel="nofollow" href="https://sourceware.org/bugzilla/show_bug.cgi?id=23249"&gt;glibc selection mechanism is vendor-specific&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In the summer of 2020, AMD, Intel, Red Hat, and SUSE &lt;a target="_blank" rel="nofollow" href="https://lists.llvm.org/pipermail/llvm-dev/2020-July/143289.html"&gt;collaborated&lt;/a&gt; to define three x86-64 microarchitecture levels on top of the x86-64 baseline. The three microarchitectures group together CPU features roughly based on hardware release dates:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;x86-64-v2&lt;/b&gt; brings support (among other things) for vector instructions up to Streaming SIMD Extensions 4.2 (SSE4.2)  and Supplemental Streaming SIMD Extensions 3 (SSSE3), the POPCNT instruction (useful for data analysis and bit-fiddling in some data structures), and CMPXCHG16B (a two-word compare-and-swap instruction useful for concurrent algorithms).&lt;/li&gt; &lt;li&gt;&lt;b&gt;x86-64-v3&lt;/b&gt; adds vector instructions up to AVX2, MOVBE (for big-endian data access), and additional bit-manipulation instructions.&lt;/li&gt; &lt;li&gt;&lt;b&gt;x86-64-v4&lt;/b&gt; includes vector instructions from some of the AVX-512 variants.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;We&amp;#8217;ve documented the three levels in detail &lt;a target="_blank" rel="nofollow" href="https://gitlab.com/x86-psABIs/x86-64-ABI"&gt;in the x86-64 psABI supplement&lt;/a&gt;. The upcoming GCC version 11 and LLVM version 12 releases will support them in &lt;code&gt;-march=&lt;/code&gt; arguments. Patches to augment the &lt;code&gt;glibc&lt;/code&gt; dynamic loader with a new mechanism (without the power-set construction) have been incorporated into &lt;code&gt;glibc&lt;/code&gt; under the &lt;code&gt;glibc-hwcaps&lt;/code&gt; moniker. These changes are expected to be part of the upcoming 2.33 release of &lt;code&gt;glibc&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Architectural considerations for RHEL 9&lt;/h2&gt; &lt;p&gt;Historically, the x86_64 Red Hat Enterprise Linux userspace has been built to match the original AMD K8 baseline minus the AMD-specific 3Dnow! parts. That decision has held up to and including the latest version of Red Hat Enterprise Linux 8. However, due to kernel-driver removals, old hardware (such as systems with first-generation Opteron CPUs) are unlikely to run Red Hat Enterprise Linux in any useful fashion. There are also significant power requirements when running older hardware.&lt;/p&gt; &lt;p&gt;So far, we&amp;#8217;ve been able to utilize new CPU features via mechanisms like &lt;a target="_blank" rel="nofollow" href="https://sourceware.org/glibc/wiki/GNU_IFUNC"&gt;IFUNCs&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc/Function-Multiversioning.html"&gt;function multi-versioning&lt;/a&gt;, or loading alternative implementations via &lt;code&gt;dlopen&lt;/code&gt;, which could be automated with the ongoing &lt;code&gt;glibc-hwcaps&lt;/code&gt; work. Each of these approaches applies only to specifically designated blocks of code. The remainder of the distribution still does not employ additional CPU features, so those parts of the CPU are essentially dormant.&lt;/p&gt; &lt;p&gt;As a welcome side-effect of defining the x86-64 microarchitecture levels, we now have a convenient language for discussing the architectural baseline for Linux distributions: We can stay the course and use the original K8 baseline or we can apply one of the three later levels.&lt;/p&gt; &lt;h2&gt;Recommendations for RHEL 9&lt;/h2&gt; &lt;p&gt;We believe that x86-64-v2 is the appropriate choice for Red Hat Enterprise Linux 9. Our recommendation is based on the following observations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Virtual machine models that artificially mask x86-64-v2 CPU features despite host support are comparatively easy to adjust.&lt;/li&gt; &lt;li&gt;The next level, x86-64-v3, is not available because we intend to build one unified distribution for the x86-64 architecture.&lt;/li&gt; &lt;li&gt;The &lt;a target="_blank" rel="nofollow" href="https://www.intel.com/content/www/us/en/products/processors/atom/p-series/atom-p-5900-processor-brief.html"&gt;new server-class CPUs released in 2020&lt;/a&gt; do not implement the AVX instruction set.&lt;/li&gt; &lt;li&gt;AVX instructions are also unavailable in certain software implementations (although the &lt;code&gt;valgrind&lt;/code&gt; tool supports them). The lack of emulation support could constrain developers targeting Red Hat Enterprise Linux 9.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;As in previous Red Hat Enterprise Linux versions, we will continue to support other CPU features (beyond x86-64-v2) via IFUNCs and function multi-versioning. We might also use the &lt;code&gt;glibc-hwcaps&lt;/code&gt; mechanism to load optimized versions of libraries. As usual, these plans could change at any time before the release of Red Hat Enterprise Linux 9.&lt;/p&gt; &lt;p&gt;Currently, the changes do not apply to Fedora outside of &lt;a target="_blank" rel="nofollow" href="https://docs.fedoraproject.org/en-US/eln/"&gt;Fedora ELN&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Support for other architectures&lt;/h2&gt; &lt;p&gt;Together with its hardware partners, Red Hat regularly reviews the architectural baselines for all architectures. For IBM POWER and IBM Z, we have historically updated the baseline for every major release. For example, Red Hat Enterprise Linux 8 requires POWER little-endian (ppc64le) and—for the s390x architecture—a z13 or later CPU.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This article described the criteria guiding Red Hat’s approach to choosing an x86-64 microarchitecture level for Red Hat Enterprise Linux 9. Our recommendation, x86-64-v2, will support additional vector instructions (up to SSE4.2 and SSSE 3), the POPCNT instruction for data analysis, and the CMPXCHG16B instruction for concurrency algorithms.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F05%2Fbuilding-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level%2F&amp;#38;linkname=Building%20Red%20Hat%20Enterprise%20Linux%209%20for%20the%20x86-64-v2%20microarchitecture%20level" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F05%2Fbuilding-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level%2F&amp;#38;linkname=Building%20Red%20Hat%20Enterprise%20Linux%209%20for%20the%20x86-64-v2%20microarchitecture%20level" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F05%2Fbuilding-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level%2F&amp;#38;linkname=Building%20Red%20Hat%20Enterprise%20Linux%209%20for%20the%20x86-64-v2%20microarchitecture%20level" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F05%2Fbuilding-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level%2F&amp;#38;linkname=Building%20Red%20Hat%20Enterprise%20Linux%209%20for%20the%20x86-64-v2%20microarchitecture%20level" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F05%2Fbuilding-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level%2F&amp;#38;linkname=Building%20Red%20Hat%20Enterprise%20Linux%209%20for%20the%20x86-64-v2%20microarchitecture%20level" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F05%2Fbuilding-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level%2F&amp;#38;linkname=Building%20Red%20Hat%20Enterprise%20Linux%209%20for%20the%20x86-64-v2%20microarchitecture%20level" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F05%2Fbuilding-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level%2F&amp;#38;linkname=Building%20Red%20Hat%20Enterprise%20Linux%209%20for%20the%20x86-64-v2%20microarchitecture%20level" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F05%2Fbuilding-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level%2F&amp;#038;title=Building%20Red%20Hat%20Enterprise%20Linux%209%20for%20the%20x86-64-v2%20microarchitecture%20level" data-a2a-url="https://developers.redhat.com/blog/2021/01/05/building-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level/" data-a2a-title="Building Red Hat Enterprise Linux 9 for the x86-64-v2 microarchitecture level"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/05/building-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level/"&gt;Building Red Hat Enterprise Linux 9 for the x86-64-v2 microarchitecture level&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/KcfJ7prYKfg" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;One of the most important early decisions when building a Linux distribution is the scope of supported hardware. The distribution&amp;#8217;s default compiler flags are significant for hardware-platform compatibility. Programs that use newer CPU instructions might not run on older CPUs. In this article, I discuss a new approach to building the x86-64 variant of Red [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/05/building-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level/"&gt;Building Red Hat Enterprise Linux 9 for the x86-64-v2 microarchitecture level&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/01/05/building-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">839567</post-id><dc:creator>Florian Weimer</dc:creator><dc:date>2021-01-05T08:00:09Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/01/05/building-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level/</feedburner:origLink></entry><entry><title type="html">CodeReady Containers - Installing business automation operator (Part 4)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/mBGaOLDhK38/codeready-containers-installing.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/yjxsK4vNz38/codeready-containers-installing.html</id><updated>2021-01-05T06:00:00Z</updated><content type="html">As a consistent user and developer on the OpenShift platform over the years, I've tried helping users by sharing my application development content as we've journeyed from  cartridges all the way to container base development. With container based development we've also transitioned from using templates to define how to deploy our tooling and applications, to operators. There are many examples of how to work with the templated versions of our applications around decision management and process automation found on  and . Over the releases of OpenShift 4.x we've seen that operators have become the preferred method of packaging, deploying and managing a Kubernetes-native, thus OpenShift, application. With this in mind it felt like time to explore and update existing demos and example projects to employ the provided operators for installation and runtime. In this series of articles I'll be providing a walk through what it is to use the latest tooling provided by the business automation operator on the OpenShift Container Platform. We'll install the operator by hand, start instances of the decision management and process automation tooling using the OpenShift console, explore command line automation of installing, starting, and configuring the same tooling from the command line, and share a fully automated process automation tooling installation with pre-installed example project. In the previous article we've in the OpenShift web console,  and . In our final article of this series, let's install the business automation operator and its provided developer tooling using the command line. COMMAND LINE OPERATOR INSTALLATION The starting point in this article is that you have installed OpenShift using CodeReady Containers as shown in  , which makes used of my project that validates your environment ensuring you have the proper OpenShift client tooling known as oc client. This client tooling is what we need to interact with the OpenShift platform APIs and is a mainstay for both developers and operations. In this article we'll be using this client tooling as a developer as much as possible, but some of our actions require administrator access to set up the operator installation.  If you chose for some reason to install the CodeReady Containers yourself then you might not have the initial set up described here. In that case you will have seen a message in your startup logs (after running  crc start) that points you to the provided client, shown here for a unix based environment from your favorite console: $ crc oc-env export PATH="/Users/eschabel/.crc/bin/oc:$PATH" # Run this command to configure your shell: # eval $(crc oc-env) If you test the version of this client executable, you'll find that it matches the version of the OpenShift platform: $ ~/.crc/bin/oc/oc version --client Client Version: 4.6.6 The first thing we need to do is ensure you are logged in to your OpenShift platform, which is provided in the start up logs (all one line): $ oc login -u developer -p developer https://api.crc.testing:6443 Let's set up a new project called appdev-in-cloud: $ oc new-project appdev-in-cloud Now using project "appdev-in-cloud" on server "https://api.crc.testing:6443". There is more output lines following the project creation, but they are not that important to us right now. If you want to verify that this project exists you can list your users projects with: $ oc get projects This will list the newly created appdev-in-cloud project as active. Next up, let's take a closer look at preparing to install the business automation operator from our client tooling. This requires admin user access for the next two actions, so let's switch users: $ oc login -u kubeadmin -p HERE https://api.crc.testing:6443 Note your kubeadmin user password was generated during the CodeReady Containers installation and should be used instead of my placeholder above. The login will report access to many more projects, but is currently using  your appdev-in-cloud project. There are two steps needed before you can install the business automation operator in the project appdev-in-cloud. First you need to define the operator group, which is done by creating a file called create-operatorgroup.yaml that contains the following lines: apiVersion: operators.coreos.com/v1 kind: OperatorGroup metadata: annotations: olm.providedAPIs: KieApp.v2.app.kiegroup.org name: businessautomation-operator namespace: appdev-in-cloud spec: targetNamespaces: - appdev-in-cloud Once you have this file available, you can apply it to your project with the following: $ oc apply -f create-operatorgroup.yaml operatorgroup.operators.coreos.com/businessautomation-operator created The output shows that the group was successfully created. Now we need to set the subscription for this operator, done by creating a file called sub-operator.yaml that contains the following lines: apiVersion: operators.coreos.com/v1alpha1 kind: Subscription metadata: name: businessautomation-operator namespace: appdev-in-cloud spec: channel: stable installPlanApproval: Automatic name: businessautomation-operator source: redhat-operators sourceNamespace: openshift-marketplace Once you have this file available, you can apply it the same as the previous one: $ oc apply -f sub-operator.yaml subscription.operators.coreos.com/businessautomation-operator created The output again shows the subscription was successfully created. Now you can see that the business automationoperator is installed (if you like, using the OpenShift web console as you did in ) with the following: $ oc get operators This lists your operator as ready to install. For the final part you can install either one of the provided tools, either Red Hat Decision Manager or Red Hat Process Automation Manager, by using their respective definitions. First log back in as the developer user: $ oc login -u developer -p developer https://api.crc.testing:6443 Then create a file called kieapp-rhdm-authoring.yaml and put the following in it: apiVersion: app.kiegroup.org/v2 kind: KieApp metadata: name: rhdm labels: app: crc-rhdm-install namespace: appdev-in-cloud spec: commonConfig: adminPassword: redhatdm1! adminUser: erics applicationName: rhdm environment: rhdm-authoring This file creates the same instance of the tooling you experienced with . To do this from the client tooling, just run the following command: $ oc apply -f kieapp-rhdm-authoring.yaml kieapp.app.kiegroup.org/rhdm created This starts the installation of an instance of the decision management tooling based on the operator you added to the project appdev-in-cloud. View the installation progress with the following: $ oc get pods The output lists the operator and other pods being set up, initially the status will be ContainerCreating. This takes some time, but when they are fully operational the status should change to Completed. The same can be done for process automation tooling, just like you did in by creating a file called kieapp-rhpam-authoring.yaml and putting the following in it: apiVersion: app.kiegroup.org/v2 kind: KieApp metadata: name: rhpam labels: app: crc-rhpam-install namespace: appdev-in-cloud spec: commonConfig: adminPassword: redhatpam1! adminUser: erics applicationName: rhpam environment: rhpam-authoring Start the instance creation from the client tooling by running the following command: $ oc apply -f kieapp-rhpam-authoring.yaml kieapp.app.kiegroup.org/rhpam created This starts the installation of an instance of the decision management tooling based on the operator you added to the project appdev-in-cloud. View the installation progress with the following: $ oc get pods Again, you'll find pods starting to install process automation tooling in the status ContainerCreating, after some time they will change to Completed. If you are having issues with memory running out, you can remove the project after installing the decision management tooling with the following command: $ oc delete project appdev-in-cloud Once this completes it's removal of the project, you can recreate appdev-in-cloud and install the process automation tooling using the above file. This completes your tour of installing the business automation operator using the client tooling, then leveraging the operator to install both of the provided developer tooling options. MISSED PART OF THE SERIES? Not a worry if you missed any of the previous articles in this four part series, just check out how you can install the container platform (hopefully being able to use the  project), then learn , followed by a look at  and provided by this operator using the OpenShift web console. Finally, in this last article we've installed the business automation operator and offered developer tools using the OpenShift client tooling from a command line.  If you have any comments for feedback, please reach out. I hope you enjoyed this series and tour.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/mBGaOLDhK38" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/yjxsK4vNz38/codeready-containers-installing.html</feedburner:origLink></entry></feed>
